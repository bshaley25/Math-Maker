{"version":3,"sources":["components/Cell.js","components/Grid.js","components/MathSymbols.js","components/Calculator.js","components/Main.js","components/Modal.js","components/Login.js","components/Card.js","components/DashBoard.js","components/UserTools.js","Firebase/index.js","App.js","serviceWorker.js","index.js"],"names":["position","value","updateCell","touchValue","handleTouchValue","id","draggable","onDrop","event","preventDefault","card_value","dataTransfer","getData","onDragStart","target","setData","innerText","onDragOver","onClick","classname","className","handleClick","gridData","columns","rows","size","useState","setTouchValue","makecells","map","cell","Cell","key","style","display","gridTemplateColumns","gridTemplateRows","children","color","width","height","margin","onDragEnd","numbers","i","push","Dashboard","open","setOpen","dataURL","setDataURL","showHideClassName","html2canvas","document","getElementById","then","canvas","toDataURL","src","alt","href","download","changePage","loginUsername","changeToken","hasAccount","setHasAccount","username","setUsername","password","setPassword","errorMessage","setErrorMessage","signInSuccess","response","a","json","loginData","localStorage","setItem","token","signInFailure","message","onSubmit","fetch","method","headers","body","JSON","stringify","res","status","type","name","placeholder","onChange","grid","loadSavedGrid","deleteGrid","parse","data","colums","savedGrids","cards","Card","saveGrid","saveAsNewGrid","page","gridID","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","storage","App","state","hasToken","user","BASE_URL","fetchGrids","setState","grids","createGrid","col","row","x","y","Math","floor","plusOneColumn","oldColCount","newColCount","updategridColumns","minusOneColumn","oldGridData","newGridData","counter","newPosition","plusOneRow","oldRowCount","newRowCount","updategridRows","minusOneRow","slice","resizeGrid","updatedSavedGrids","filter","savedGrid","concat","console","log","this","UserTools","DashBoard","min","max","step","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.097c09ad.chunk.js","sourcesContent":["import React from 'react'\n\n\nexport default ({ position, value, updateCell, touchValue, handleTouchValue }) => {\n\n    const dragStart = event => {\n        const target = event.target\n        \n        event.dataTransfer.setData('card_value', target.innerText)\n        \n        event.target.innerText = ''\n    }\n    \n    const dragOver = (event) => {\n        event.preventDefault()\n    }\n    \n    const drop = event => {\n        event.preventDefault()\n\n        const card_value = event.dataTransfer.getData('card_value')\n\n        updateCell(position, card_value)\n    }\n\n    const handleClick = (event) => {\n\n        let classname = event.target.className\n        classname === '' ? event.target.className = 'line' : event.target.className = ''\n        switch(classname) {\n            case '':\n              event.target.className = 'line'\n              break;\n            case 'line':\n                event.target.className = 'strikethrough'\n              break;\n            default:\n                event.target.className = ''\n        } \n    }\n\n    const handleTouch = (event) => {\n        // console.log('TOUCH END', event.target)\n\n        if(touchValue === '' ) {\n            console.log('empty', event.target.innerText)\n            handleTouchValue(event.target.innerText)\n        } else{\n            console.log(\"NOT\", touchValue)\n            updateCell(position, touchValue)\n            handleTouchValue('')\n        }\n    }\n\n    return (\n        <div\n            id={position}\n            draggable={true}\n            onDrop={drop}\n            onDragStart={dragStart}\n            onDragOver={dragOver}\n            // onTouchStart={touchStart}\n            // onTouch={touchStart}\n            // onTouchEnd={handleTouch}\n            // onClick={handleClick}\n            onClick={event => handleClick(event)}\n        >\n            {value}\n        </div>\n    )\n\n}\n","import React, { useState } from 'react'\nimport Cell from './Cell'\nimport '../stylesheets/Grid.scss'\n\nexport default ({gridData, updateCell, columns, rows, size}) => {\n\n    \n    const [touchValue, setTouchValue] = useState('');\n    \n    const handleTouchValue = (value) => {\n        setTouchValue(value)\n    }\n\n    const makecells = gridData.map(cell => <Cell key={cell.position} {...cell} updateCell={updateCell} touchValue={touchValue} handleTouchValue={handleTouchValue}/>)\n    \n    return (\n        <div \n            id='grid' \n            className='grid'\n            style={{\n                display: 'grid',\n                gridTemplateColumns: `repeat(${columns}, ${size}rem)`,\n                gridTemplateRows: `repeat(${rows}, ${size}rem)`,\n            }}\n        >\n            {makecells}\n        </div>\n    )\n}","import React from 'react'\n\nexport default ({ id, children }) => {\n\n\n    const dragOver = (event) => {\n        event.preventDefault()\n    }\n\n    const dragStart = event => {\n        const target = event.target\n        target.style.color = 'red'\n        target.style.width = 0\n        target.style.height = 0\n        target.style.margin = 'auto'\n\n        event.dataTransfer.setData('card_value', target.innerText)\n    }\n\n    const dragEnd = event => {\n\n        const target = event.target\n        target.style.color = 'black'\n        target.style.width = '4rem'\n        target.style.height = '4rem'\n        target.style.margin = 0\n    }\n\n    const touch = (event) => {\n        console.log(event.target)\n    }\n\n    return (\n        <div\n            id={id}\n            draggable={true}\n            onDragStart={dragStart}\n            onDragOver={dragOver}\n            onDragEnd={dragEnd}\n            // onTouch={touch}\n            // onTouchMove={dragOver}\n            // onTouchEnd={dragEnd}\n        >\n            {children}\n        </div>\n    )\n\n}","import React from 'react'\nimport Symbol from './MathSymbols'\nimport '../stylesheets/Calculator.scss'\n\nexport default () => {\n    \n    const numbers = []\n    for(let i=1;i<10;i++) {\n        numbers.push(<Symbol key={i}>{i}</Symbol>)\n    }\n\n    return (\n        <div className='calculator'>\n            <div className='numbers'>\n                {numbers}\n                <Symbol id='zero'>0</Symbol>\n            </div>\n\n            <div className='symbols'>\n                <Symbol> . </Symbol>\n                <Symbol> + </Symbol>\n                <Symbol> - </Symbol>\n                <Symbol> × </Symbol>\n                <Symbol> ÷ </Symbol>\n                <Symbol> / </Symbol>\n                <Symbol> = </Symbol>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport Grid from './Grid'\nimport Calculator from './Calculator';\n\nexport default function Dashboard({ gridData, updateCell, columns, rows, size }) {\n\n  return (\n    <main>\n      <Calculator/>\n      <Grid \n        gridData={gridData} \n        updateCell={updateCell} \n        columns={columns} \n        rows={rows} \n        size={size}\n      />\n    </main>\n  );\n}","import React, { useState } from 'react';\nimport html2canvas from 'html2canvas'\nimport '../stylesheets/Modal.scss'\n\nexport default () => {\n  \n  const [open, setOpen] = useState(false);\n  const [dataURL, setDataURL] = useState('');\n\n  const showHideClassName = open ? 'modal show' : 'modal hidden';\n\n  const handleOpen = () => {\n    setOpen(true);\n    html2canvas(document.getElementById('grid'))\n    .then(canvas => {\n      setDataURL(canvas.toDataURL())\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <button onClick={handleOpen}>Take Picture</button>\n      <div className={showHideClassName}>\n        <section >\n          <img id=\"image\" src={dataURL} alt=\"MathMaker.png\"></img>\n          <a href={dataURL} download={\"MathMaker.png\"}>Click To Download</a>\n          <button onClick={handleClose} > click to close</button>\n        </section>\n      </div>\n    </>\n  );\n}","import React,  { useState } from 'react'\nimport '../stylesheets/Login.scss'\n\nexport default ({ changePage, loginUsername, changeToken }) => {\n\n    const [hasAccount, setHasAccount] = useState(true)\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [errorMessage, setErrorMessage] = useState('')\n    \n    const signInSuccess = async (response) => {\n        const loginData = await response.json()\n\n        localStorage.setItem('token', loginData.token);\n        loginUsername(loginData.username)\n        setUsername('')\n        setPassword('')\n        changePage('main')\n        changeToken()\n    }\n\n    const signInFailure = async (response) => {\n        const { message } = await response.json()\n\n        setErrorMessage(message)\n    } \n\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n\n        const AUTH_URL = hasAccount ? 'https://mathmaker.herokuapp.com/login' : 'https://mathmaker.herokuapp.com/users'\n\n        fetch( AUTH_URL , {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            username: username,\n            password: password\n          }),\n        })\n        .then(res => {\n            res.status === 200 || res.status === 201 ? signInSuccess(res) : signInFailure(res)\n        })\n    }\n\n    return (\n        <div className=\"login-card\">\n            <h1>{ hasAccount ? 'Log-in' : 'Sign-up' }</h1>\n            <form onSubmit={handleSubmit}>\n                <input type=\"text\" name=\"user\" placeholder=\"Username\" value={username} onChange={event => setUsername(event.target.value)}/>\n                <input type=\"password\" name=\"pass\" placeholder=\"Password\" value={password} onChange={event => setPassword(event.target.value)}/>\n                <input type=\"submit\" name=\"login\" className=\"login login-submit\" value={ hasAccount ? 'Log-in' : 'Sign-up'} />\n            </form>\n            <h3>\n                { hasAccount ? 'Dont have an acount?' : 'Have an Account?'} \n                <button onClick={() => setHasAccount(!hasAccount)}>\n                { hasAccount ? 'Sign-up' : 'Log-in'}\n                </button>\n            </h3>\n            {errorMessage ? <h2 className='error'>{errorMessage}</h2> : null}\n        </div>\n    )\n\n}","import React from 'react'\n\nexport default ({ grid, loadSavedGrid, deleteGrid }) => {\n\n    const handleClick = () => {\n        const gridData =  JSON.parse(grid.data)\n        loadSavedGrid(grid.colums, grid.rows, gridData, grid.id)\n    }\n    \n    const handleDelete = (event) => {\n        event.preventDefault()\n        deleteGrid(grid.id)\n    }\n\n    return (\n        <section className='card' >\n            {grid.id}\n            <button onClick={handleClick}>Edit</button>\n            <button onClick={handleDelete}>Delete</button>\n        </section>\n    )\n}","import React from 'react'\nimport Card from './Card'\n\nexport default ({ savedGrids, loadSavedGrid, deleteGrid}) => {\n\n    const cards = savedGrids.map((grid, i)=> <Card key={i} grid={grid} loadSavedGrid={loadSavedGrid} deleteGrid={deleteGrid}/>)\n\n    return (\n        <main className='dashboard'>\n            {cards}\n        </main>\n    )\n\n}","import React from 'react'\n\nexport default ({ saveGrid, saveAsNewGrid, changePage, page, gridID }) => {\n\n    return (\n        <>\n            { !gridID ? <button onClick={saveAsNewGrid}>CREATE NEW</button> : <button onClick={saveGrid}>SAVE</button>}\n            { page === 'main' ? <button onClick={() => changePage('dashboard')}>DASHBOARD</button> : <button onClick={() => changePage('main')}>MAIN</button> }\n        </>\n    )\n\n}","import firebase from 'firebase/app'\nimport 'firebase/storage'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDof42A6x_sGp3Oi9u1oKuDpQJV-QJGRUs\",\n    authDomain: \"mathmaker-90e12.firebaseapp.com\",\n    databaseURL: \"https://mathmaker-90e12.firebaseio.com\",\n    projectId: \"mathmaker-90e12\",\n    storageBucket: \"mathmaker-90e12.appspot.com\",\n    messagingSenderId: \"216555215409\",\n    appId: \"1:216555215409:web:b1266161aa69d8c564d310\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nconst storage = firebase.storage();\n\nexport {\n    storage, firebase as default\n}","import React, { Component } from 'react';\nimport './stylesheets/App.scss';\nimport Main from './components/Main'\nimport PictureModal from './components/Modal'\nimport Login from './components/Login'\nimport DashBoard from './components/DashBoard';\nimport UserTools from './components/UserTools'\nimport { storage } from './Firebase/index'\nimport html2canvas from 'html2canvas'\n\nclass App extends Component {\n  \n  state = {\n    page: 'main',\n    hasToken: null,\n    user: null,\n    savedGrids: [],\n    gridID: null,\n    gridData: [],\n    columns: 15,\n    rows: 15,\n    size: 2,\n    BASE_URL: 'https://mathmaker.herokuapp.com'\n  }\n\n  componentDidMount() {\n    this.createGrid()\n\n    if(localStorage.token) {\n      this.setState({hasToken: true})\n      this.fetchGrids()\n    } else {\n      this.setState({hasToken: false})\n    }\n  }\n\n  fetchGrids = () => {\n    fetch('https://mathmaker.herokuapp.com/grids', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.token}`\n      }\n    })\n    .then(res => res.json())\n    .then(data => {\n      this.setState({user: data.user})\n      this.setState({savedGrids: data.grids})\n    })\n  }\n\n  createGrid = () => {\n    const col = this.state.columns\n    const row = this.state.rows\n    const gridData = []\n    for(let i=0;i<(col*row);i++) {\n      const x = i % col\n      const y = Math.floor(i / col)\n      const position = `${x},${y}`\n      gridData[i] = {position, value:''}\n    }\n    this.setState({gridData})\n  }\n\n  plusOneColumn = () => {\n    const oldColCount = this.state.columns\n    const newColCount = oldColCount + 1\n    this.updategridColumns(newColCount, oldColCount)\n    this.setState({columns: newColCount})\n  }\n\n  minusOneColumn = () => {\n    const oldColCount = this.state.columns\n    const newColCount = oldColCount - 1\n    this.updategridColumns(newColCount, oldColCount)\n    this.setState({columns: newColCount})\n  }\n  \n  updategridColumns = (newColCount, oldColCount) => {\n    const oldGridData = this.state.gridData\n    const row = this.state.rows\n    const newGridData = [] \n\n    if( (newColCount - oldColCount) > 0 ) {       // COLUMNS ARE GETTING BIGGER\n      let counter = 0\n      for(let i=0; i<(oldColCount*row); i++) {\n        if( (i+1) % oldColCount === 0 ) {\n          const newPosition = `${(newColCount-1)},${counter}`\n          newGridData.push(oldGridData[i])\n          newGridData.push({position: newPosition, value:''})\n          counter++\n        } else {\n          newGridData.push(oldGridData[i])\n        }\n      }\n    } else if ( newColCount - oldColCount < 0 ) {  // COLUMNS ARE GETTING SMALLER\n      for(let i=0; i<(oldColCount*row); i++) {\n        if((i+1) % oldColCount === 0 ) {\n          // console.log()\n        } else {\n          newGridData.push(oldGridData[i])\n        }\n      }\n    }\n    this.setState({gridData: newGridData})\n  }\n\n  plusOneRow = () => {\n    const oldRowCount = this.state.rows\n    const newRowCount = oldRowCount + 1\n    this.updategridRows(newRowCount, oldRowCount)\n    this.setState({rows: newRowCount})\n  }\n\n  minusOneRow = () => {\n    const oldRowCount = this.state.rows\n    const newRowCount = oldRowCount - 1\n    this.updategridRows(newRowCount, oldRowCount)\n    this.setState({rows: newRowCount})\n  }\n  \n  updategridRows = (newRowCount, oldRowCount) => { \n    const oldGridData = this.state.gridData\n    const columns = this.state.columns\n    let newGridData = [] \n\n    if ( newRowCount > oldRowCount) {              /// ROWS ARE GETTING BIGGER\n      for(let i=0; i<(newRowCount*columns); i++) {\n        const newPosition = `${(i % columns)},${ (newRowCount - 1) }`\n        if( oldGridData[i] ) {\n          newGridData.push(oldGridData[i])\n        } else {\n          newGridData.push({position: newPosition, value: ''})\n        }\n      }\n    } else if ( newRowCount < oldRowCount ) {      /// ROWS ARE GETTING SMALLER\n      newGridData = oldGridData.slice( 0 , (-1 * columns) );\n    }\n    this.setState({gridData: newGridData})\n  }\n\n  resizeGrid = (event) => {\n    this.setState({size: event.target.value})\n  }\n\n  updateCell = (position, value) => {\n    const newGridData = this.state.gridData.map(cell => {\n      if(cell.position === position) {\n        return {position, value}\n      } else {\n        return cell\n      }\n    })\n    this.setState({gridData: newGridData})\n  }\n\n  saveAsNewGrid = (event) => {\n\n    event.preventDefault()\n\n    fetch('https://mathmaker.herokuapp.com/grids', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.token}`\n      },\n      body: JSON.stringify({ \n        columns: this.state.columns,\n        rows: this.state.rows,\n        gridData: this.state.gridData\n      }),\n    })\n    .then(res => res.json())\n    .then(savedGrids => {\n      // savedGrids.forEach(savedGrid => {\n      this.setState({\n        savedGrids: [...this.state.savedGrids, savedGrids[0] ],\n        gridID: savedGrids[0].id\n      })\n    })\n  }\n\n  saveGrid = (event) => {\n\n    event.preventDefault()\n\n    fetch(`https://mathmaker.herokuapp.com/grids/${this.state.gridID}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.token}`\n      },\n      body: JSON.stringify({ \n        columns: this.state.columns,\n        rows: this.state.rows,\n        gridData: this.state.gridData\n      }),\n    })\n    .then(res => res.json())\n    .then(newGridData => {\n      const updatedSavedGrids = this.state.savedGrids.filter(savedGrid => savedGrid.id !== newGridData[0].id).concat(newGridData)\n      this.setState({savedGrids: updatedSavedGrids})\n    })\n  }\n\n  deleteGrid = (gridID) => {\n\n    const updatedSavedGrids = this.state.savedGrids.filter(savedGrid => savedGrid.id !== gridID)\n    this.setState({savedGrids: updatedSavedGrids})\n\n    fetch(`https://mathmaker.herokuapp.com/grids/${gridID}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.token}`\n      }\n    })\n    .then(res => res.status === 204 ? console.log('Delete Successful') : console.log('Didnt work'))\n\n  }\n\n  changePage = (page) => {\n    this.setState({page: page})\n  }\n\n  loginUsername = (user) => {\n    this.setState({user: user})\n  }\n\n  changeToken = () => {\n    this.setState({hasToken: true})\n  }\n\n  loadSavedGrid = (columns, rows, gridData, gridID) => {\n    this.setState({gridData: gridData})\n    this.setState({columns: columns})\n    this.setState({rows: rows})\n    this.setState({gridID: gridID})\n    this.setState({page: 'main'})\n  }\n\n  render() {\n    return (\n      <>\n        <header className='header'>\n          <h1>Welcome {this.state.user}</h1>\n          <nav className='toolbar'>\n            { this.state.hasToken ? <UserTools changePage={this.changePage} saveGrid={this.saveGrid} saveAsNewGrid={this.saveAsNewGrid} page={this.state.page} gridID={this.state.gridID}/> : null}\n            <PictureModal/>\n            { this.state.page === 'login' ? <button onClick={() => this.changePage('main')}>MAIN</button> : <button onClick={() => this.changePage('login')}>LOGIN</button>  }\n          </nav>\n        </header>\n\n        { this.state.page === 'main' ? \n          <Main\n            gridData={this.state.gridData} \n            updateCell={this.updateCell} \n            columns={this.state.columns} \n            rows={this.state.rows} \n            size={this.state.size}\n          /> \n          : null}\n        { this.state.page === 'login' ? <Login changePage={this.changePage} loginUsername={this.loginUsername} changeToken={this.changeToken} /> : null }\n        { this.state.page === 'dashboard' ? <DashBoard savedGrids={this.state.savedGrids} loadSavedGrid={this.loadSavedGrid} deleteGrid={this.deleteGrid}></DashBoard> : null}\n\n        <footer>\n          <button onClick={this.createGrid}> Clear </button>\n          <div className='tool'>\n            <p>Rows: {this.state.rows}</p>\n            <button onClick={() => this.minusOneRow()}>-</button>   \n            <button onClick={() => this.plusOneRow()}>+</button>   \n          </div>\n\n          <div className='tool'>\n            <p>Columns: {this.state.columns}</p>\n            <button onClick={() => this.minusOneColumn()}>-</button>   \n            <button onClick={() => this.plusOneColumn()}>+</button>        \n          </div>\n\n          <div className='tool'>\n            <p>Grid Size</p>\n            <input className='input' type=\"range\" min=\"2\" max=\"3\" step='.1' onChange={this.resizeGrid} value={this.size}></input>\n          </div>\n        </footer>\n\n      </>\n    ) \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}