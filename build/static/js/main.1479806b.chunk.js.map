{"version":3,"sources":["components/Cell.js","components/Grid.js","components/MathSymbols.js","components/Calculator.js","components/PictureModal.js","components/Header.js","components/Footer.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["position","value","updateCell","dragStart","event","target","dataTransfer","setData","innerText","dragOver","preventDefault","drop","card_value","getData","id","draggable","onDrop","onDragStart","onDragOver","onTouchStart","onTouchMove","onTouchEnd","onClick","classname","className","gridData","columns","rows","size","makecells","map","cell","Cell","key","style","display","gridTemplateColumns","gridTemplateRows","children","color","width","height","margin","dragEnd","onDragEnd","numbers","i","push","Paper","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","image","classes","useState","modalStyle","open","setOpen","dataURL","setDataURL","body","src","alt","Button","type","href","download","html2canvas","document","getElementById","then","canvas","toDataURL","Modal","onClose","aria-labelledby","aria-describedby","menuButton","marginRight","title","flexGrow","slider","clearGrid","updateColumns","updateRows","resizeGrid","AppBar","Toolbar","IconButton","edge","aria-label","Typography","variant","min","max","onChange","step","PictureModal","text","paddingBottom","list","marginBottom","subheader","appBar","bottom","grow","fabButton","zIndex","right","BottomAppBar","root","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","mixins","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButtonHidden","drawerPaper","whiteSpace","drawerPaperClose","overflowX","breakpoints","up","appBarSpacer","content","overflow","container","paddingTop","flexDirection","fixedHeight","Dashboard","React","clsx","Container","maxWidth","item","xs","App","state","createGrid","col","row","x","y","Math","floor","setState","updategridColumns","parseInt","newColCount","oldColCount","oldGridData","newGridData","counter","newPosition","updategridRows","newRowCount","oldRowCount","slice","this","CssBaseline","Header","resetGrid","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1479806b.chunk.js","sourcesContent":["import React from 'react'\n\n\nexport default ({ position, value, updateCell }) => {\n\n    const dragStart = event => {\n        const target = event.target\n        \n        event.dataTransfer.setData('card_value', target.innerText)\n        \n        event.target.innerText = ''\n    }\n    \n    const dragOver = (event) => {\n        event.preventDefault()\n    }\n    \n    const drop = event => {\n        event.preventDefault()\n\n        const card_value = event.dataTransfer.getData('card_value')\n\n        updateCell(position, card_value)\n        \n    }\n\n    const handleClick = (event) => {\n\n        let classname = event.target.className\n        classname === '' ? event.target.className = 'line' : event.target.className = ''\n        switch(classname) {\n            case '':\n              event.target.className = 'line'\n              break;\n            case 'line':\n                event.target.className = 'strikethrough'\n              break;\n            default:\n                event.target.className = ''\n        } \n    }\n\n    return (\n        <div\n            id={position}\n            draggable={true}\n            onDrop={drop}\n            onDragStart={dragStart}\n            onDragOver={dragOver}\n            onTouchStart={dragStart}\n            onTouchMove={dragOver}\n            onTouchEnd={drop}\n            onClick={handleClick}\n        >\n            {value}\n        </div>\n    )\n\n}\n","import React from 'react'\nimport Cell from './Cell'\n\nexport default ({gridData, updateCell, columns, rows, size}) => {\n\n    const makecells = gridData.map(cell => <Cell key={cell.position} {...cell} updateCell={updateCell} />)\n\n    return (\n            <div \n                id='grid' \n                className='grid'\n                style={{\n                    display: 'grid',\n                    gridTemplateColumns: `repeat(${columns}, ${size}rem)`,\n                    gridTemplateRows: `repeat(${rows}, ${size}rem)`,\n                }}\n            >\n                {makecells}\n            </div>\n    )\n}","import React from 'react'\n\nexport default ({ id, children }) => {\n\n\n    const dragOver = (event) => {\n        event.preventDefault()\n    }\n\n    const dragStart = event => {\n        const target = event.target\n        target.style.color = 'red'\n        target.style.width = 0\n        target.style.height = 0\n        target.style.margin = 'auto'\n\n        event.dataTransfer.setData('card_value', target.innerText)\n    }\n\n    const dragEnd = event => {\n\n        const target = event.target\n        target.style.color = 'black'\n        target.style.width = '4rem'\n        target.style.height = '4rem'\n        target.style.margin = 0\n\n    }\n\n\n    return (\n        <div\n            id={id}\n            draggable={true}\n            onDragStart={dragStart}\n            onDragOver={dragOver}\n            onDragEnd={dragEnd}\n            onTouchStart={dragStart}\n            onTouchMove={dragOver}\n            onTouchEnd={dragEnd}\n        >\n            {children}\n        </div>\n    )\n\n}","import React from 'react'\nimport Symbol from './MathSymbols'\nimport Paper from '@material-ui/core/Paper'\n\n\nexport default () => {\n    \n    const numbers = []\n    for(let i=1;i<10;i++) {\n        numbers.push(<Symbol key={i}>{i}</Symbol>)\n    }\n\n    return (\n        <Paper className='Calulator'>\n            <div className='calculator'>\n                <div className='numbers'>\n                    {numbers}\n                    <Symbol id='zero'>0</Symbol>\n                </div>\n\n                <div className='symbols'>\n                    <Symbol> . </Symbol>\n                    <Symbol> + </Symbol>\n                    <Symbol> - </Symbol>\n                    <Symbol> × </Symbol>\n                    <Symbol> ÷ </Symbol>\n                    <Symbol> / </Symbol>\n                    <Symbol> = </Symbol>\n                </div>\n            </div>\n        </Paper>\n    )\n}","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Modal from '@material-ui/core/Modal';\nimport html2canvas from 'html2canvas'\nimport Button from  '@material-ui/core/Button'\n\nfunction getModalStyle() {\n  return {\n    top: `50%`,\n    left: `50%`,\n    transform: `translate(-50%, -50%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n  image: {\n      width: 400\n  }\n}));\n\nexport default () => {\n\n  const classes = useStyles();\n  const [modalStyle] = useState(getModalStyle);\n  const [open, setOpen] = useState(false);\n  const [dataURL, setDataURL] = useState('');\n\n  const handleOpen = () => {\n    setOpen(true);\n    html2canvas(document.getElementById('grid'))\n    .then(canvas => {\n        setDataURL(canvas.toDataURL())\n    });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const body = (\n    <div style={modalStyle} className={classes.paper}>\n        <img id=\"image\" src={dataURL} className={classes.image} alt=\"MathMaker.png\"></img>\n        <Button type='button'>\n            <a href={dataURL} download={\"MathMaker.png\"}>Click To Download</a>\n        </Button>\n    </div>\n  );\n\n  return (\n    <div>\n      <Button onClick={handleOpen}>Take Picture</Button>\n\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        {body}\n      </Modal>\n    </div>\n  );\n}","import React from 'react'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography'\nimport Button from  '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport PictureModal from './PictureModal';\n// import ButtonGroup from '@material-ui/core/ButtonGroup'\n\nconst useStyles = makeStyles((theme) => ({\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 5,\n    },\n    slider: {\n        width: 300,\n        backgroundColor: 'white',\n      },\n  })\n);\n\nexport default ({clearGrid, updateColumns, columns, updateRows, rows, resizeGrid, size}) => {\n\n    const classes = useStyles();\n\n    return (\n        <AppBar>\n        <Toolbar>\n\n          <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n\n          <Typography variant=\"h6\" className={classes.title}>\n            Welcome!\n          </Typography>\n\n          <Toolbar>\n              <Typography variant=\"h6\">\n                  Change rows\n              </Typography>\n              <input type=\"number\" min=\"10\" max=\"40\" onChange={updateRows} value={rows}></input>\n          </Toolbar>\n\n          <Toolbar>\n              <Typography variant=\"h6\">\n                  Change columns\n              </Typography>\n              <input type=\"number\" min=\"10\" max=\"40\" onChange={updateColumns} value={columns}></input>\n            </Toolbar>\n\n            <Toolbar>\n              <Typography variant=\"h6\">\n                  Grid Size\n              </Typography>\n              <input type=\"range\" min=\"1.5\" max=\"3.5\" step='.1' onChange={resizeGrid} value={size}></input>\n            </Toolbar>\n\n          <Button color=\"inherit\" onClick={clearGrid}>Clear</Button>\n\n          <PictureModal></PictureModal>\n\n        </Toolbar>\n      </AppBar>\n\n    )\n\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport Fab from '@material-ui/core/Fab';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Avatar from '@material-ui/core/Avatar';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport AddIcon from '@material-ui/icons/Add';\nimport SearchIcon from '@material-ui/icons/Search';\nimport MoreIcon from '@material-ui/icons/MoreVert';\n\n\nconst useStyles = makeStyles((theme) => ({\n  text: {\n    padding: theme.spacing(2, 2, 0),\n  },\n  paper: {\n    paddingBottom: 50,\n  },\n  list: {\n    marginBottom: theme.spacing(2),\n  },\n  subheader: {\n    backgroundColor: theme.palette.background.paper,\n  },\n  appBar: {\n    top: 'auto',\n    bottom: 0,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  fabButton: {\n    position: 'absolute',\n    zIndex: 1,\n    top: -30,\n    left: 0,\n    right: 0,\n    margin: '0 auto',\n  },\n}));\n\nexport default function BottomAppBar() {\n  const classes = useStyles();\n\n  return (\n      <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n        <Toolbar>\n          {/* <Fab color=\"secondary\" aria-label=\"add\" className={classes.fabButton}>\n            <AddIcon />\n          </Fab> */}\n          {/* <div className={classes.grow} /> */}\n        </Toolbar>\n      </AppBar>\n  );\n}","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Drawer from '@material-ui/core/Drawer';\nimport Box from '@material-ui/core/Box';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Link from '@material-ui/core/Link';\nimport Calculator from './Calculator'\nimport GridDnD from './Grid'\n// import { mainListItems, secondaryListItems } from './listItems';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: '0 8px',\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: 'none',\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: 'relative',\n    whiteSpace: 'nowrap',\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: 'hidden',\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    height: '100vh',\n    overflow: 'auto',\n  },\n  container: {\n    paddingTop: theme.spacing(4),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    overflow: 'auto',\n    flexDirection: 'column',\n  },\n  fixedHeight: {\n    height: 240,\n  },\n}));\n\nexport default function Dashboard({ gridData, updateCell, columns, rows, size }) {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(true);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  return (\n    <main className={classes.content}>\n    <div className={classes.appBarSpacer} />\n    <Container maxWidth=\"x-lg\" className={classes.container}>\n        <Grid \n            container \n            spacing={4}\n            container\n            // direction=\"row\"\n            justify=\"center\"\n            alignItems=\"center\"\n        >\n            <Grid item xs={4}>\n                <Paper>\n                    <Calculator/>\n                </Paper>\n            </Grid>\n\n            <Grid item xs={8}>\n                <Paper className={classes.paper}>\n                    <GridDnD\n                        gridData={gridData} \n                        updateCell={updateCell} \n                        columns={columns} \n                        rows={rows} \n                        size={size}\n                    />\n                </Paper>\n            </Grid>\n        </Grid>\n    </Container>\n    </main>\n  );\n}","import React, { Component } from 'react';\n// import './stylesheets/App.scss';\nimport './stylesheets/Calculator.scss';\nimport './stylesheets/Grid.scss';\nimport Grid from './components/Grid'\nimport Calculator from './components/Calculator';\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport  Container from '@material-ui/core/Container';\nimport CssBaseline  from '@material-ui/core/CssBaseline';\nimport Main from './components/Main'\nimport { AppBar, Box } from '@material-ui/core';\n\nclass App extends Component {\n  \n  state = {\n    gridData: [],\n    columns: 10,\n    rows: 10,\n    size: 2\n  }\n\n  componentDidMount() {\n    this.createGrid()\n  }\n\n  createGrid = () => {\n    const col = this.state.columns\n    const row = this.state.rows\n    const gridData = []\n    for(let i=0;i<(col*row);i++) {\n      const x = i % col\n      const y = Math.floor(i / col)\n      const position = `${x},${y}`\n      gridData[i] = {position, value:''}\n    }\n    this.setState({gridData})\n  }\n  \n  updateColumns = (event) => {\n    this.updategridColumns(event.target.value, this.state.columns)\n    this.setState({columns: parseInt(event.target.value)})\n  }\n  \n  updategridColumns = (newColCount, oldColCount) => {\n    const oldGridData = this.state.gridData\n    const row = this.state.rows\n    const newGridData = [] \n\n    if( (newColCount - oldColCount) > 0 ) {       // COLUMNS ARE GETTING BIGGER\n      let counter = 0\n      for(let i=0; i<(oldColCount*row); i++) {\n        if((i+1) % oldColCount === 0 ) {\n          const newPosition = `${(newColCount-1)},${counter}`\n          newGridData.push(oldGridData[i])\n          newGridData.push({position: newPosition, value:''})\n          counter++\n        } else {\n          newGridData.push(oldGridData[i])\n        }\n      }\n\n    } else if ( newColCount - oldColCount < 0 ) {  // COLUMNS ARE GETTING SMALLER\n      for(let i=0; i<(oldColCount*row); i++) {\n        if((i+1) % oldColCount === 0 ) {\n          // console.log()\n        } else {\n          newGridData.push(oldGridData[i])\n        }\n      }\n    }\n    this.setState({gridData: newGridData})\n  }\n\n  updateRows = (event) => {\n    this.updategridRows(event.target.value, this.state.rows)\n    this.setState({rows: parseInt(event.target.value)})\n  }\n  \n  updategridRows = (newRowCount, oldRowCount) => { \n    const oldGridData = this.state.gridData\n    const columns = this.state.columns\n    let newGridData = [] \n\n    if ( newRowCount > oldRowCount) {              /// ROWS ARE GETTING BIGGER\n      for(let i=0; i<(newRowCount*columns); i++) {\n        const newPosition = `${(i % columns)},${ (newRowCount - 1) }`\n        if( oldGridData[i] ) {\n          newGridData.push(oldGridData[i])\n        } else {\n          newGridData.push({position: newPosition, value: ''})\n        }\n      }\n    } else if ( newRowCount < oldRowCount ) {      /// ROWS ARE GETTING SMALLER\n      newGridData = oldGridData.slice( 0 , (-1 * columns) );\n    }\n    this.setState({gridData: newGridData})\n  }\n\n  resizeGrid = (event) => {\n    this.setState({size: event.target.value})\n  }\n\n  updateCell = (position, value) => {\n    const newGridData = this.state.gridData.map(cell => {\n      if(cell.position === position) {\n        return {position, value}\n      } else {\n        return cell\n      }\n    })\n    this.setState({gridData: newGridData})\n  }\n\n  render() {\n    return (\n      <>\n       <CssBaseline/>\n        <Header \n            columns={this.state.columns} \n            rows={this.state.rows} \n            size={this.state.size}\n            clearGrid={this.createGrid} \n            updateColumns={this.updateColumns} \n            updateRows={this.updateRows}\n            resetGrid={this.resetGrid}\n            resizeGrid={this.resizeGrid}\n          />\n\n        {/* <Container >\n          <Calculator/>\n          <Grid \n            gridData={this.state.gridData} \n            updateCell={this.updateCell} \n            columns={this.state.columns} \n            rows={this.state.rows} \n            size={this.state.size}\n          />\n        </Container>\n        <Footer></Footer> */}\n\n        <Main\n          gridData={this.state.gridData} \n          updateCell={this.updateCell} \n          columns={this.state.columns} \n          rows={this.state.rows} \n          size={this.state.size}\n        />\n        <Footer/>\n      </>\n    ) \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}