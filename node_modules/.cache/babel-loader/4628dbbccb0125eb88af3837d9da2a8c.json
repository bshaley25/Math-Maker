{"ast":null,"code":"var _jsxFileName = \"/Users/bshaley/Development/Projects/Math-Maker/mathmakerfrontend/src/App.js\";\nimport React, { Component } from 'react';\nimport './stylesheets/App.scss';\nimport Grid from './components/Grid';\nimport Calculator from './components/Calculator';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      gridData: [],\n      columns: 20,\n      rows: 20\n    };\n\n    this.createGrid = () => {\n      const col = this.state.columns;\n      const row = this.state.rows;\n      const gridData = [];\n\n      for (let i = 0; i < col * row; i++) {\n        const x = i % col;\n        const y = Math.floor(i / col);\n        const position = `${x},${y}`;\n        gridData[i] = {\n          position,\n          value: ''\n        };\n      }\n\n      this.setState({\n        gridData\n      });\n    };\n\n    this.updateColumns = event => {\n      this.setState({\n        columns: parseInt(event.target.value)\n      });\n      this.updategrid(event.target.value);\n    };\n\n    this.updategrid = column => {\n      const oldGridData = this.state.gridData;\n      const col = column;\n      const oldCol = col - 1;\n      const row = this.state.rows;\n      const newGridData = [];\n\n      for (let i = 0; i < oldCol * row; i++) {\n        if ((i + 1) % oldCol === 0) {\n          newGridData.push(oldGridData[i]);\n          newGridData.push({\n            position: oldGridData[i].position,\n            value: 'N'\n          });\n          console.log(oldGridData[i].position, col);\n        } else {\n          newGridData.push(oldGridData[i]); // console.log(oldGridData[i])\n        }\n      } // for(let i=0;i<(col*row);i++) {\n      //   const x = i % col\n      //   const y = Math.floor(i / col)\n      //   const position = `${x},${y}`\n      //   if((i+1) % col === 0 ) {\n      //     newGridData.push({position, value:''})\n      //   } else {\n      //     // newGridData.push(oldGridData[i])\n      //     newGridData.push({position, value:''})\n      //     // console.log(oldGridData[i])\n      //   }\n      //   // newGridData.push({position, value:''})\n      //   console.log(smallcounter)\n      // }\n\n\n      this.setState({\n        gridData: newGridData\n      });\n    };\n\n    this.updateCell = (position, value) => {\n      const newGridData = this.state.gridData.map(cell => {\n        if (cell.position === position) {\n          return {\n            position,\n            value\n          };\n        } else {\n          return cell;\n        }\n      });\n      this.setState({\n        gridData: newGridData\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.createGrid();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n      clearGrid: this.createGrid,\n      updateColumns: this.updateColumns,\n      columns: this.state.columns,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Calculator, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      gridData: this.state.gridData,\n      updateCell: this.updateCell,\n      columns: this.state.columns,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }));\n  } // render() {\n  //   return (\n  //     <>\n  //       <Header></Header>\n  //       <MathMaker></MathMaker>\n  //       <Footer></Footer>\n  //     </>\n  //   );\n  // }\n\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bshaley/Development/Projects/Math-Maker/mathmakerfrontend/src/App.js"],"names":["React","Component","Grid","Calculator","Header","Footer","App","state","gridData","columns","rows","createGrid","col","row","i","x","y","Math","floor","position","value","setState","updateColumns","event","parseInt","target","updategrid","column","oldGridData","oldCol","newGridData","push","console","log","updateCell","map","cell","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './stylesheets/App.scss';\nimport Grid from './components/Grid'\nimport Calculator from './components/Calculator';\nimport Header from './components/Header'\nimport Footer from './components/Footer'\n\nclass App extends Component {\n  \n  state = {\n    gridData: [],\n    columns: 20,\n    rows: 20\n  }\n\n  componentDidMount() {\n    this.createGrid()\n  }\n\n  createGrid = () => {\n    const col = this.state.columns\n    const row = this.state.rows\n    const gridData = []\n    for(let i=0;i<(col*row);i++) {\n      const x = i % col\n      const y = Math.floor(i / col)\n      const position = `${x},${y}`\n      gridData[i] = {position, value:''}\n    }\n    this.setState({gridData})\n  }\n  \n  updateColumns = (event) => {\n    this.setState({columns: parseInt(event.target.value)})\n    this.updategrid(event.target.value)\n  }\n  \n  updategrid = (column) => {\n    const oldGridData = this.state.gridData\n    const col = column\n    const oldCol = col - 1\n    const row = this.state.rows\n    const newGridData = [] \n    for(let i=0; i<(oldCol*row); i++) {\n      if((i+1) % oldCol === 0 ) {\n        newGridData.push(oldGridData[i])\n        newGridData.push({position: oldGridData[i].position, value:'N'})\n        console.log(oldGridData[i].position, col)\n      } else {\n        newGridData.push(oldGridData[i])\n        // console.log(oldGridData[i])\n      }\n    }\n\n    // for(let i=0;i<(col*row);i++) {\n    //   const x = i % col\n    //   const y = Math.floor(i / col)\n    //   const position = `${x},${y}`\n    //   if((i+1) % col === 0 ) {\n    //     newGridData.push({position, value:''})\n    //   } else {\n    //     // newGridData.push(oldGridData[i])\n    //     newGridData.push({position, value:''})\n    //     // console.log(oldGridData[i])\n    //   }\n\n    //   // newGridData.push({position, value:''})\n    //   console.log(smallcounter)\n    // }\n    this.setState({gridData: newGridData})\n  }\n\n\n  updateCell = (position, value) => {\n    const newGridData = this.state.gridData.map(cell => {\n      if(cell.position === position) {\n        return {position, value}\n      } else {\n        return cell\n      }\n    })\n    this.setState({gridData: newGridData})\n  }\n\n  render() {\n    return (\n      <>\n        <Header clearGrid={this.createGrid} updateColumns={this.updateColumns} columns={this.state.columns} ></Header>\n        <main>\n          <Calculator ></Calculator>\n          <Grid gridData={this.state.gridData} updateCell={this.updateCell} columns={this.state.columns} ></Grid>\n        </main>\n        <Footer></Footer>\n      </>\n    ) \n  }\n\n\n  // render() {\n  //   return (\n  //     <>\n  //       <Header></Header>\n  //       <MathMaker></MathMaker>\n  //       <Footer></Footer>\n  //     </>\n\n  //   );\n  // }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}