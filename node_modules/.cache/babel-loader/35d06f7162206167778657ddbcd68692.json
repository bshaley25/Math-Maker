{"ast":null,"code":"var _jsxFileName = \"/Users/bshaley/Development/Projects/Math-Maker/mathmakerfrontend/src/App.js\";\nimport React, { Component } from 'react';\nimport './stylesheets/App.scss';\nimport Grid from './components/Grid';\nimport Calculator from './components/Calculator';\nimport Modal from './components/Modal';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      gridData: [],\n      columns: 15,\n      rows: 15,\n      size: 2,\n      showModal: false\n    };\n\n    this.createGrid = () => {\n      const col = this.state.columns;\n      const row = this.state.rows;\n      const gridData = [];\n\n      for (let i = 0; i < col * row; i++) {\n        const x = i % col;\n        const y = Math.floor(i / col);\n        const position = `${x},${y}`;\n        gridData[i] = {\n          position,\n          value: ''\n        };\n      }\n\n      this.setState({\n        gridData\n      });\n    };\n\n    this.updateColumns = event => {\n      this.updategridColumns(event.target.value, this.state.columns);\n      this.setState({\n        columns: parseInt(event.target.value)\n      });\n    };\n\n    this.updategridColumns = (newColCount, oldColCount) => {\n      const oldGridData = this.state.gridData;\n      const row = this.state.rows;\n      const newGridData = [];\n\n      if (newColCount - oldColCount > 0) {\n        // COLUMNS ARE GETTING BIGGER\n        let counter = 0;\n\n        for (let i = 0; i < oldColCount * row; i++) {\n          if ((i + 1) % oldColCount === 0) {\n            const newPosition = `${newColCount - 1},${counter}`;\n            newGridData.push(oldGridData[i]);\n            newGridData.push({\n              position: newPosition,\n              value: ''\n            });\n            counter++;\n          } else {\n            newGridData.push(oldGridData[i]);\n          }\n        }\n      } else if (newColCount - oldColCount < 0) {\n        // COLUMNS ARE GETTING SMALLER\n        for (let i = 0; i < oldColCount * row; i++) {\n          if ((i + 1) % oldColCount === 0) {// console.log()\n          } else {\n            newGridData.push(oldGridData[i]);\n          }\n        }\n      }\n\n      this.setState({\n        gridData: newGridData\n      });\n    };\n\n    this.updateRows = event => {\n      this.updategridRows(event.target.value, this.state.rows);\n      this.setState({\n        rows: parseInt(event.target.value)\n      });\n    };\n\n    this.updategridRows = (newRowCount, oldRowCount) => {\n      const oldGridData = this.state.gridData;\n      const columns = this.state.columns;\n      let newGridData = [];\n\n      if (newRowCount > oldRowCount) {\n        /// ROWS ARE GETTING BIGGER\n        for (let i = 0; i < newRowCount * columns; i++) {\n          const newPosition = `${i % columns},${newRowCount - 1}`;\n\n          if (oldGridData[i]) {\n            newGridData.push(oldGridData[i]);\n          } else {\n            newGridData.push({\n              position: newPosition,\n              value: ''\n            });\n          }\n        }\n      } else if (newRowCount < oldRowCount) {\n        /// ROWS ARE GETTING SMALLER\n        newGridData = oldGridData.slice(0, -1 * columns);\n      }\n\n      this.setState({\n        gridData: newGridData\n      });\n    };\n\n    this.resizeGrid = event => {\n      this.setState({\n        size: event.target.value\n      });\n    };\n\n    this.updateCell = (position, value) => {\n      const newGridData = this.state.gridData.map(cell => {\n        if (cell.position === position) {\n          return {\n            position,\n            value\n          };\n        } else {\n          return cell;\n        }\n      });\n      this.setState({\n        gridData: newGridData\n      });\n    };\n\n    this.showModal = () => {\n      this.setState({\n        showModal: true\n      });\n    };\n\n    this.hideModal = () => {\n      this.setState({\n        showModal: false\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.createGrid();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }, \"Welcome\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"toolBar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input\",\n      type: \"number\",\n      min: \"10\",\n      max: \"40\",\n      onChange: this.updateRows,\n      value: this.state.rows,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input\",\n      type: \"number\",\n      min: \"10\",\n      max: \"40\",\n      onChange: this.updateColumns,\n      value: this.state.columns,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input\",\n      type: \"range\",\n      min: \"1.5\",\n      max: \"3.5\",\n      step: \".1\",\n      onChange: this.resizeGrid,\n      value: this.size,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.createGrid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }, \" clear \"), /*#__PURE__*/React.createElement(Modal, {\n      show: this.state.show,\n      handleClose: this.hideModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Calculator, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      gridData: this.state.gridData,\n      updateCell: this.updateCell,\n      columns: this.state.columns,\n      rows: this.state.rows,\n      size: this.state.size,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bshaley/Development/Projects/Math-Maker/mathmakerfrontend/src/App.js"],"names":["React","Component","Grid","Calculator","Modal","App","state","gridData","columns","rows","size","showModal","createGrid","col","row","i","x","y","Math","floor","position","value","setState","updateColumns","event","updategridColumns","target","parseInt","newColCount","oldColCount","oldGridData","newGridData","counter","newPosition","push","updateRows","updategridRows","newRowCount","oldRowCount","slice","resizeGrid","updateCell","map","cell","hideModal","componentDidMount","render","show"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './stylesheets/App.scss';\nimport Grid from './components/Grid'\nimport Calculator from './components/Calculator';\nimport Modal from './components/Modal'\n\n\nclass App extends Component {\n  \n  state = {\n    gridData: [],\n    columns: 15,\n    rows: 15,\n    size: 2,\n    showModal: false\n  }\n\n  componentDidMount() {\n    this.createGrid()\n  }\n\n  createGrid = () => {\n    const col = this.state.columns\n    const row = this.state.rows\n    const gridData = []\n    for(let i=0;i<(col*row);i++) {\n      const x = i % col\n      const y = Math.floor(i / col)\n      const position = `${x},${y}`\n      gridData[i] = {position, value:''}\n    }\n    this.setState({gridData})\n  }\n  \n  updateColumns = (event) => {\n    this.updategridColumns(event.target.value, this.state.columns)\n    this.setState({columns: parseInt(event.target.value)})\n  }\n  \n  updategridColumns = (newColCount, oldColCount) => {\n    const oldGridData = this.state.gridData\n    const row = this.state.rows\n    const newGridData = [] \n\n    if( (newColCount - oldColCount) > 0 ) {       // COLUMNS ARE GETTING BIGGER\n      let counter = 0\n      for(let i=0; i<(oldColCount*row); i++) {\n        if((i+1) % oldColCount === 0 ) {\n          const newPosition = `${(newColCount-1)},${counter}`\n          newGridData.push(oldGridData[i])\n          newGridData.push({position: newPosition, value:''})\n          counter++\n        } else {\n          newGridData.push(oldGridData[i])\n        }\n      }\n\n    } else if ( newColCount - oldColCount < 0 ) {  // COLUMNS ARE GETTING SMALLER\n      for(let i=0; i<(oldColCount*row); i++) {\n        if((i+1) % oldColCount === 0 ) {\n          // console.log()\n        } else {\n          newGridData.push(oldGridData[i])\n        }\n      }\n    }\n    this.setState({gridData: newGridData})\n  }\n\n  updateRows = (event) => {\n    this.updategridRows(event.target.value, this.state.rows)\n    this.setState({rows: parseInt(event.target.value)})\n  }\n  \n  updategridRows = (newRowCount, oldRowCount) => { \n    const oldGridData = this.state.gridData\n    const columns = this.state.columns\n    let newGridData = [] \n\n    if ( newRowCount > oldRowCount) {              /// ROWS ARE GETTING BIGGER\n      for(let i=0; i<(newRowCount*columns); i++) {\n        const newPosition = `${(i % columns)},${ (newRowCount - 1) }`\n        if( oldGridData[i] ) {\n          newGridData.push(oldGridData[i])\n        } else {\n          newGridData.push({position: newPosition, value: ''})\n        }\n      }\n    } else if ( newRowCount < oldRowCount ) {      /// ROWS ARE GETTING SMALLER\n      newGridData = oldGridData.slice( 0 , (-1 * columns) );\n    }\n    this.setState({gridData: newGridData})\n  }\n\n  resizeGrid = (event) => {\n    this.setState({size: event.target.value})\n  }\n\n  updateCell = (position, value) => {\n    const newGridData = this.state.gridData.map(cell => {\n      if(cell.position === position) {\n        return {position, value}\n      } else {\n        return cell\n      }\n    })\n    this.setState({gridData: newGridData})\n  }\n\n  showModal = () => {\n    this.setState({ showModal: true });\n  }\n  \n  hideModal = () => {\n    this.setState({ showModal: false });\n  }\n\n\n  render() {\n    return (\n      <>\n        <header className='header'>\n          <h1>Welcome</h1>\n\n          <div className='toolBar'>\n            <input className='input' type=\"number\" min=\"10\" max=\"40\" onChange={this.updateRows} value={this.state.rows}/>\n            <input className='input' type=\"number\" min=\"10\" max=\"40\" onChange={this.updateColumns} value={this.state.columns}/>\n            <input className='input' type=\"range\" min=\"1.5\" max=\"3.5\" step='.1' onChange={this.resizeGrid} value={this.size}></input>\n            <button onClick={this.createGrid}> clear </button>\n            <Modal show={this.state.show} handleClose={this.hideModal} />\n          </div>\n\n        </header>\n\n        <main>\n          <Calculator/>\n          <Grid \n            gridData={this.state.gridData} \n            updateCell={this.updateCell} \n            columns={this.state.columns} \n            rows={this.state.rows} \n            size={this.state.size}\n          />\n        </main>\n\n      </>\n    ) \n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}