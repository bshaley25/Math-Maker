{"ast":null,"code":"var _jsxFileName = \"/Users/bshaley/Development/Projects/Math-Maker/mathmakerfrontend/src/App.js\";\nimport React, { Component } from 'react';\nimport './stylesheets/App.scss';\nimport Grid from './components/Grid';\nimport Calculator from './components/Calculator';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      gridData: [],\n      columns: 20,\n      rows: 20\n    };\n\n    this.createGrid = () => {\n      const col = this.state.columns;\n      const row = this.state.rows;\n      const gridData = [];\n\n      for (let i = 0; i < col * row; i++) {\n        const x = i % col;\n        const y = Math.floor(i / col);\n        const position = `${x},${y}`;\n        gridData[i] = {\n          position,\n          value: ''\n        };\n      }\n\n      this.setState({\n        gridData\n      });\n    };\n\n    this.updateColumns = event => {\n      this.updategrid(event.target.value, this.state.columns);\n      this.setState({\n        columns: parseInt(event.target.value)\n      });\n    };\n\n    this.updategrid = (newColCount, oldColCount) => {\n      const oldGridData = this.state.gridData;\n      const row = this.state.rows;\n      const newGridData = [];\n\n      if (newColCount - oldColCount > 0) {\n        // COLUMNS ARE GETTING BIGGER\n        console.log(\"newColCount > oldColCount\");\n\n        for (let i = 0; i < oldColCount * row; i++) {\n          const newPosition = `${newColCount - 1},${Math.floor(i / newColCount)}`;\n\n          if ((i + 1) % oldColCount === 0) {\n            newGridData.push(oldGridData[i]);\n            newGridData.push({\n              position: newPosition,\n              value: ''\n            });\n          } else {\n            newGridData.push(oldGridData[i]);\n          }\n        }\n      } else if (newColCount - oldColCount < 0) {\n        // COLUMNS ARE GETTING SMALLER\n        for (let i = 0; i < newColCount * row; i++) {\n          if ((i + 1) % newColCount === 0) {\n            newGridData.push(oldGridData[i]);\n            newGridData.push({\n              position: newPosition,\n              value: ''\n            });\n          } else {\n            newGridData.push(oldGridData[i]);\n          }\n        }\n      } else {\n        console.log(\"newColCount ? oldColCount\");\n      } // switch (delta) {\n      //   case delta > 0:\n      //     console.log(\"newColCount > oldColCount\")\n      //     break\n      //   case delta < 0:\n      //     console.log(\"newColCount < oldColCount\")\n      //     break\n      //   default:\n      //     console.log(\"newColCount ? oldColCount\")\n      //     break\n      // }\n      // for(let i=0; i<(oldColCount*row); i++) {\n      //   const newPosition = `${(newColCount-1)},${Math.floor(i / newColCount)}`\n      //   if((i+1) % oldColCount === 0 ) {\n      //     newGridData.push(oldGridData[i])\n      //     newGridData.push({position: newPosition, value:''})\n      //   } else {\n      //     newGridData.push(oldGridData[i])\n      //   }\n      // }\n      // for(let i=0;i<(col*row);i++) {\n      //   const x = i % col\n      //   const y = Math.floor(i / col)\n      //   const position = `${x},${y}`\n      //   if((i+1) % col === 0 ) {\n      //     newGridData.push({position, value:''})\n      //   } else {\n      //     // newGridData.push(oldGridData[i])\n      //     newGridData.push({position, value:''})\n      //     // console.log(oldGridData[i])\n      //   }\n      // newGridData.push({position, value:''})\n      // console.log(smallcounter)\n      // }\n\n\n      this.setState({\n        gridData: newGridData\n      });\n    };\n\n    this.updateCell = (position, value) => {\n      const newGridData = this.state.gridData.map(cell => {\n        if (cell.position === position) {\n          return {\n            position,\n            value\n          };\n        } else {\n          return cell;\n        }\n      });\n      this.setState({\n        gridData: newGridData\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.createGrid();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n      clearGrid: this.createGrid,\n      updateColumns: this.updateColumns,\n      columns: this.state.columns,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Calculator, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      gridData: this.state.gridData,\n      updateCell: this.updateCell,\n      columns: this.state.columns,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }\n    }));\n  } // render() {\n  //   return (\n  //     <>\n  //       <Header></Header>\n  //       <MathMaker></MathMaker>\n  //       <Footer></Footer>\n  //     </>\n  //   );\n  // }\n\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bshaley/Development/Projects/Math-Maker/mathmakerfrontend/src/App.js"],"names":["React","Component","Grid","Calculator","Header","Footer","App","state","gridData","columns","rows","createGrid","col","row","i","x","y","Math","floor","position","value","setState","updateColumns","event","updategrid","target","parseInt","newColCount","oldColCount","oldGridData","newGridData","console","log","newPosition","push","updateCell","map","cell","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './stylesheets/App.scss';\nimport Grid from './components/Grid'\nimport Calculator from './components/Calculator';\nimport Header from './components/Header'\nimport Footer from './components/Footer'\n\nclass App extends Component {\n  \n  state = {\n    gridData: [],\n    columns: 20,\n    rows: 20\n  }\n\n  componentDidMount() {\n    this.createGrid()\n  }\n\n  createGrid = () => {\n    const col = this.state.columns\n    const row = this.state.rows\n    const gridData = []\n    for(let i=0;i<(col*row);i++) {\n      const x = i % col\n      const y = Math.floor(i / col)\n      const position = `${x},${y}`\n      gridData[i] = {position, value:''}\n    }\n    this.setState({gridData})\n  }\n  \n  updateColumns = (event) => {\n    this.updategrid(event.target.value, this.state.columns)\n    this.setState({columns: parseInt(event.target.value)})\n  }\n  \n  updategrid = (newColCount, oldColCount) => {\n    const oldGridData = this.state.gridData\n    const row = this.state.rows\n    const newGridData = [] \n\n    if( (newColCount - oldColCount) > 0 ) {  // COLUMNS ARE GETTING BIGGER\n\n      console.log(\"newColCount > oldColCount\")\n      for(let i=0; i<(oldColCount*row); i++) {\n        const newPosition = `${(newColCount-1)},${Math.floor(i / newColCount)}`\n        if((i+1) % oldColCount === 0 ) {\n          newGridData.push(oldGridData[i])\n          newGridData.push({position: newPosition, value:''})\n        } else {\n          newGridData.push(oldGridData[i])\n        }\n      }\n\n    } else if ( newColCount - oldColCount < 0 ) {  // COLUMNS ARE GETTING SMALLER\n\n      for(let i=0; i<(newColCount*row); i++) {\n        if((i+1) % newColCount === 0 ) {\n          newGridData.push(oldGridData[i])\n          newGridData.push({position: newPosition, value:''})\n        } else {\n          newGridData.push(oldGridData[i])\n        }\n      }\n\n    } else {\n      console.log(\"newColCount ? oldColCount\")\n    }\n\n    // switch (delta) {\n    //   case delta > 0:\n    //     console.log(\"newColCount > oldColCount\")\n    //     break\n    //   case delta < 0:\n    //     console.log(\"newColCount < oldColCount\")\n    //     break\n    //   default:\n    //     console.log(\"newColCount ? oldColCount\")\n    //     break\n    // }\n\n\n    // for(let i=0; i<(oldColCount*row); i++) {\n    //   const newPosition = `${(newColCount-1)},${Math.floor(i / newColCount)}`\n    //   if((i+1) % oldColCount === 0 ) {\n    //     newGridData.push(oldGridData[i])\n    //     newGridData.push({position: newPosition, value:''})\n    //   } else {\n    //     newGridData.push(oldGridData[i])\n    //   }\n    // }\n\n    // for(let i=0;i<(col*row);i++) {\n    //   const x = i % col\n    //   const y = Math.floor(i / col)\n    //   const position = `${x},${y}`\n    //   if((i+1) % col === 0 ) {\n    //     newGridData.push({position, value:''})\n    //   } else {\n    //     // newGridData.push(oldGridData[i])\n    //     newGridData.push({position, value:''})\n    //     // console.log(oldGridData[i])\n    //   }\n\n      // newGridData.push({position, value:''})\n      // console.log(smallcounter)\n    // }\n    this.setState({gridData: newGridData})\n  }\n\n\n  updateCell = (position, value) => {\n    const newGridData = this.state.gridData.map(cell => {\n      if(cell.position === position) {\n        return {position, value}\n      } else {\n        return cell\n      }\n    })\n    this.setState({gridData: newGridData})\n  }\n\n  render() {\n    return (\n      <>\n        <Header clearGrid={this.createGrid} updateColumns={this.updateColumns} columns={this.state.columns} ></Header>\n        <main>\n          <Calculator ></Calculator>\n          <Grid gridData={this.state.gridData} updateCell={this.updateCell} columns={this.state.columns} ></Grid>\n        </main>\n        <Footer></Footer>\n      </>\n    ) \n  }\n\n\n  // render() {\n  //   return (\n  //     <>\n  //       <Header></Header>\n  //       <MathMaker></MathMaker>\n  //       <Footer></Footer>\n  //     </>\n\n  //   );\n  // }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}