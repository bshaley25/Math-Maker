{"ast":null,"code":"var _jsxFileName = \"/Users/bshaley/Development/Projects/Math-Maker/mathmakerfrontend/src/App.js\";\nimport React, { Component } from 'react';\nimport './stylesheets/App.scss';\nimport Main from './components/Main';\nimport PictureModal from './components/Modal';\nimport Login from './components/Login';\nimport DashBoard from './components/DashBoard';\nimport UserTools from './components/UserTools';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      page: 'main',\n      user: null,\n      savedGrids: [],\n      gridData: [],\n      columns: 15,\n      rows: 15,\n      size: 2\n    };\n\n    this.createGrid = () => {\n      const col = this.state.columns;\n      const row = this.state.rows;\n      const gridData = [];\n\n      for (let i = 0; i < col * row; i++) {\n        const x = i % col;\n        const y = Math.floor(i / col);\n        const position = `${x},${y}`;\n        gridData[i] = {\n          position,\n          value: ''\n        };\n      }\n\n      this.setState({\n        gridData\n      });\n    };\n\n    this.updateColumns = event => {\n      this.updategridColumns(event.target.value, this.state.columns);\n      this.setState({\n        columns: parseInt(event.target.value)\n      });\n    };\n\n    this.updategridColumns = (newColCount, oldColCount) => {\n      const oldGridData = this.state.gridData;\n      const row = this.state.rows;\n      const newGridData = [];\n\n      if (newColCount - oldColCount > 0) {\n        // COLUMNS ARE GETTING BIGGER\n        let counter = 0;\n\n        for (let i = 0; i < oldColCount * row; i++) {\n          if ((i + 1) % oldColCount === 0) {\n            const newPosition = `${newColCount - 1},${counter}`;\n            newGridData.push(oldGridData[i]);\n            newGridData.push({\n              position: newPosition,\n              value: ''\n            });\n            counter++;\n          } else {\n            newGridData.push(oldGridData[i]);\n          }\n        }\n      } else if (newColCount - oldColCount < 0) {\n        // COLUMNS ARE GETTING SMALLER\n        for (let i = 0; i < oldColCount * row; i++) {\n          if ((i + 1) % oldColCount === 0) {// console.log()\n          } else {\n            newGridData.push(oldGridData[i]);\n          }\n        }\n      }\n\n      this.setState({\n        gridData: newGridData\n      });\n    };\n\n    this.updateRows = event => {\n      this.updategridRows(event.target.value, this.state.rows);\n      this.setState({\n        rows: parseInt(event.target.value)\n      });\n    };\n\n    this.updategridRows = (newRowCount, oldRowCount) => {\n      const oldGridData = this.state.gridData;\n      const columns = this.state.columns;\n      let newGridData = [];\n\n      if (newRowCount > oldRowCount) {\n        /// ROWS ARE GETTING BIGGER\n        for (let i = 0; i < newRowCount * columns; i++) {\n          const newPosition = `${i % columns},${newRowCount - 1}`;\n\n          if (oldGridData[i]) {\n            newGridData.push(oldGridData[i]);\n          } else {\n            newGridData.push({\n              position: newPosition,\n              value: ''\n            });\n          }\n        }\n      } else if (newRowCount < oldRowCount) {\n        /// ROWS ARE GETTING SMALLER\n        newGridData = oldGridData.slice(0, -1 * columns);\n      }\n\n      this.setState({\n        gridData: newGridData\n      });\n    };\n\n    this.resizeGrid = event => {\n      this.setState({\n        size: event.target.value\n      });\n    };\n\n    this.updateCell = (position, value) => {\n      const newGridData = this.state.gridData.map(cell => {\n        if (cell.position === position) {\n          return {\n            position,\n            value\n          };\n        } else {\n          return cell;\n        }\n      });\n      this.setState({\n        gridData: newGridData\n      });\n    };\n\n    this.saveAsNewGrid = event => {\n      event.preventDefault();\n      fetch('http://localhost:5000/savegrid', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.token}`\n        },\n        body: JSON.stringify({\n          columns: this.state.columns,\n          rows: this.state.rows,\n          gridData: this.state.gridData\n        })\n      }).then(res => res.json()).then(savedGrids => this.setState({\n        savedGrids\n      }));\n    };\n\n    this.saveGrid = event => {\n      event.preventDefault();\n      fetch('http://localhost:5000/savegrid', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.token}`\n        },\n        body: JSON.stringify({\n          gridData: this.state.gridData\n        })\n      }).then(res => res.json()).then();\n    };\n\n    this.getGrid = event => {\n      event.preventDefault();\n      fetch('http://localhost:5000/grids').then(res => res.json()).then(allData => {\n        const savedGrids = allData.map(grid => {\n          return JSON.parse(grid.data);\n        });\n        this.setState({\n          savedGrids\n        });\n      });\n    };\n\n    this.changePage = page => {\n      this.setState({\n        page: page\n      });\n    };\n\n    this.loginPageChange = () => {\n      this.setState({\n        page: 'main'\n      });\n    };\n\n    this.loginUsername = user => {\n      this.setState({\n        user: user\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.createGrid();\n    fetch('http://localhost:5000/grids', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.token}`\n      }\n    }).then(res => res.json()).then(data => {\n      this.setState({\n        user: data.user\n      });\n      this.setState({\n        savedGrids: data.grids\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }\n    }, \"Welcome\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"toolbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }\n    }, localStorage.token ? /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.saveGrid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 36\n      }\n    }, \" Save Grid \") : null, localStorage.token ? /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.saveAsNewGrid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 36\n      }\n    }, \" Save As New Grid \") : null, this.state.page === 'dashboard' ? /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.setState({\n        page: 'main'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 49\n      }\n    }, \"Go back to main\") : /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.setState({\n        page: 'dashboard'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 130\n      }\n    }, \"DashBoard\"), /*#__PURE__*/React.createElement(UserTools, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(PictureModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }\n    }), this.state.page === 'login' ? /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.changePage('main'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 45\n      }\n    }, \"Go back to main\") : /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.changePage('login'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 120\n      }\n    }, \"login\"))), this.state.page === 'main' ? /*#__PURE__*/React.createElement(Main, {\n      gridData: this.state.gridData,\n      updateCell: this.updateCell,\n      columns: this.state.columns,\n      rows: this.state.rows,\n      size: this.state.size,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 40\n      }\n    }) : null, this.state.page === 'login' ? /*#__PURE__*/React.createElement(Login, {\n      loginPageChange: this.loginPageChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 41\n      }\n    }) : null, this.state.page === 'dashboard' ? /*#__PURE__*/React.createElement(DashBoard, {\n      savedGrids: this.state.savedGrids,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 45\n      }\n    }) : null, /*#__PURE__*/React.createElement(\"footer\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.createGrid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 11\n      }\n    }, \" Clear \"), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input\",\n      type: \"number\",\n      min: \"10\",\n      max: \"40\",\n      onChange: this.updateRows,\n      value: this.state.rows,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input\",\n      type: \"number\",\n      min: \"10\",\n      max: \"40\",\n      onChange: this.updateColumns,\n      value: this.state.columns,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input\",\n      type: \"range\",\n      min: \"1.5\",\n      max: \"3.5\",\n      step: \".1\",\n      onChange: this.resizeGrid,\n      value: this.size,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bshaley/Development/Projects/Math-Maker/mathmakerfrontend/src/App.js"],"names":["React","Component","Main","PictureModal","Login","DashBoard","UserTools","App","state","page","user","savedGrids","gridData","columns","rows","size","createGrid","col","row","i","x","y","Math","floor","position","value","setState","updateColumns","event","updategridColumns","target","parseInt","newColCount","oldColCount","oldGridData","newGridData","counter","newPosition","push","updateRows","updategridRows","newRowCount","oldRowCount","slice","resizeGrid","updateCell","map","cell","saveAsNewGrid","preventDefault","fetch","method","headers","localStorage","token","body","JSON","stringify","then","res","json","saveGrid","getGrid","allData","grid","parse","data","changePage","loginPageChange","loginUsername","componentDidMount","grids","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './stylesheets/App.scss';\nimport Main from './components/Main'\nimport PictureModal from './components/Modal'\nimport Login from './components/Login'\nimport DashBoard from './components/DashBoard';\nimport UserTools from './components/UserTools'\n\nclass App extends Component {\n  \n  state = {\n    page: 'main',\n    user: null,\n    savedGrids: [],\n    gridData: [],\n    columns: 15,\n    rows: 15,\n    size: 2,\n  }\n\n  componentDidMount() {\n    this.createGrid()\n\n    fetch('http://localhost:5000/grids', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.token}`\n      }\n    })\n    .then(res => res.json())\n    .then(data => {\n      this.setState({user: data.user})\n      this.setState({savedGrids: data.grids})\n    })\n  }\n\n  createGrid = () => {\n    const col = this.state.columns\n    const row = this.state.rows\n    const gridData = []\n    for(let i=0;i<(col*row);i++) {\n      const x = i % col\n      const y = Math.floor(i / col)\n      const position = `${x},${y}`\n      gridData[i] = {position, value:''}\n    }\n    this.setState({gridData})\n  }\n  \n  updateColumns = (event) => {\n    this.updategridColumns(event.target.value, this.state.columns)\n    this.setState({columns: parseInt(event.target.value)})\n  }\n  \n  updategridColumns = (newColCount, oldColCount) => {\n    const oldGridData = this.state.gridData\n    const row = this.state.rows\n    const newGridData = [] \n\n    if( (newColCount - oldColCount) > 0 ) {       // COLUMNS ARE GETTING BIGGER\n      let counter = 0\n      for(let i=0; i<(oldColCount*row); i++) {\n        if((i+1) % oldColCount === 0 ) {\n          const newPosition = `${(newColCount-1)},${counter}`\n          newGridData.push(oldGridData[i])\n          newGridData.push({position: newPosition, value:''})\n          counter++\n        } else {\n          newGridData.push(oldGridData[i])\n        }\n      }\n\n    } else if ( newColCount - oldColCount < 0 ) {  // COLUMNS ARE GETTING SMALLER\n      for(let i=0; i<(oldColCount*row); i++) {\n        if((i+1) % oldColCount === 0 ) {\n          // console.log()\n        } else {\n          newGridData.push(oldGridData[i])\n        }\n      }\n    }\n    this.setState({gridData: newGridData})\n  }\n\n  updateRows = (event) => {\n    this.updategridRows(event.target.value, this.state.rows)\n    this.setState({rows: parseInt(event.target.value)})\n  }\n  \n  updategridRows = (newRowCount, oldRowCount) => { \n    const oldGridData = this.state.gridData\n    const columns = this.state.columns\n    let newGridData = [] \n\n    if ( newRowCount > oldRowCount) {              /// ROWS ARE GETTING BIGGER\n      for(let i=0; i<(newRowCount*columns); i++) {\n        const newPosition = `${(i % columns)},${ (newRowCount - 1) }`\n        if( oldGridData[i] ) {\n          newGridData.push(oldGridData[i])\n        } else {\n          newGridData.push({position: newPosition, value: ''})\n        }\n      }\n    } else if ( newRowCount < oldRowCount ) {      /// ROWS ARE GETTING SMALLER\n      newGridData = oldGridData.slice( 0 , (-1 * columns) );\n    }\n    this.setState({gridData: newGridData})\n  }\n\n  resizeGrid = (event) => {\n    this.setState({size: event.target.value})\n  }\n\n  updateCell = (position, value) => {\n    const newGridData = this.state.gridData.map(cell => {\n      if(cell.position === position) {\n        return {position, value}\n      } else {\n        return cell\n      }\n    })\n    this.setState({gridData: newGridData})\n  }\n\n  saveAsNewGrid = (event) => {\n\n    event.preventDefault()\n\n    fetch('http://localhost:5000/savegrid', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.token}`\n      },\n      body: JSON.stringify({ \n        columns: this.state.columns,\n        rows: this.state.rows,\n        gridData: this.state.gridData\n      }),\n    })\n    .then(res => res.json())\n    .then(savedGrids => this.setState({savedGrids}))\n  }\n\n  saveGrid = (event) => {\n\n    event.preventDefault()\n\n    fetch('http://localhost:5000/savegrid', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.token}`\n      },\n      body: JSON.stringify({ gridData: this.state.gridData }),\n    })\n    .then(res => res.json())\n    .then()\n  }\n\n  getGrid = event => {\n\n    event.preventDefault()\n\n    fetch('http://localhost:5000/grids')\n    .then(res => res.json())\n    .then(allData => {\n\n      const savedGrids = allData.map(grid => {\n        return JSON.parse(grid.data)\n      })\n\n      this.setState({ savedGrids })\n\n    })\n  }\n\n  changePage = (page) => {\n    this.setState({page: page})\n  }\n\n  loginPageChange = () => {\n    this.setState({page: 'main'})\n  }\n\n  loginUsername = (user) => {\n    this.setState({user: user})\n  }\n\n  render() {\n    return (\n      <>\n        <header className='header'>\n          <h1>Welcome</h1>\n          <div className='toolbar'>\n\n            { localStorage.token ? <button onClick={this.saveGrid}> Save Grid </button> : null}\n            { localStorage.token ? <button onClick={this.saveAsNewGrid}> Save As New Grid </button> : null}\n            {/* <button onClick={this.getGrid}> GET IT!!! </button> */}\n            {/* <button onClick={this.changeGrid}>Change Grid</button> */}\n            { this.state.page === 'dashboard' ? <button onClick={() => this.setState({page: 'main'})}>Go back to main</button> : <button onClick={() => this.setState({page: 'dashboard'})}>DashBoard</button> }\n            <UserTools />\n            <PictureModal/>\n            { this.state.page === 'login' ? <button onClick={() => this.changePage('main')}>Go back to main</button> : <button onClick={() => this.changePage('login')}>login</button>  }\n          </div>\n        </header>\n\n\n        { this.state.page === 'main' ? <Main\n          gridData={this.state.gridData} \n          updateCell={this.updateCell} \n          columns={this.state.columns} \n          rows={this.state.rows} \n          size={this.state.size}\n        /> : null}\n        { this.state.page === 'login' ? <Login loginPageChange={this.loginPageChange}/> : null }\n        { this.state.page === 'dashboard' ? <DashBoard savedGrids={this.state.savedGrids}></DashBoard> : null}\n\n        <footer>\n          <button onClick={this.createGrid}> Clear </button>\n          <input className='input' type=\"number\" min=\"10\" max=\"40\" onChange={this.updateRows} value={this.state.rows}/>\n          <input className='input' type=\"number\" min=\"10\" max=\"40\" onChange={this.updateColumns} value={this.state.columns}/>\n          <input className='input' type=\"range\" min=\"1.5\" max=\"3.5\" step='.1' onChange={this.resizeGrid} value={this.size}></input>\n        </footer>\n\n      </>\n    ) \n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}