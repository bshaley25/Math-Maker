{"ast":null,"code":"var _jsxFileName = \"/Users/bshaley/Development/Projects/Math-Maker/mathmakerfrontend/src/App.js\";\nimport React, { Component } from 'react';\nimport './stylesheets/App.scss';\nimport Grid from './components/Grid';\nimport Calculator from './components/Calculator';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      gridData: [],\n      columns: 20,\n      rows: 20\n    };\n\n    this.createGrid = () => {\n      const newCol = this.state.columns;\n      const oldCol = newCol - 1;\n      const row = this.state.rows;\n      const gridData = [];\n\n      for (let i = 0; i < col * row; i++) {\n        const x = i % col;\n        const y = Math.floor(i / col);\n        const position = `${x},${y}`;\n        gridData[i] = {\n          position,\n          value: ''\n        };\n      }\n\n      this.setState({\n        gridData\n      });\n    };\n\n    this.updateColumns = event => {\n      this.setState({\n        columns: parseInt(event.target.value)\n      });\n      this.updategrid(event.target.value);\n    };\n\n    this.updategrid = colm => {\n      // const oldGridData = this.state.gridData\n      const col = colm;\n      const row = this.state.rows;\n      const newGridData = [];\n\n      for (let i = 0; i < col * row; i++) {\n        const x = i % col;\n        const y = Math.floor(i / col);\n        const position = `${x},${y}`;\n        newGridData[i] = {\n          position,\n          value: ''\n        };\n      }\n\n      this.setState({\n        gridData: newGridData\n      });\n    };\n\n    this.updateCell = (position, value) => {\n      const newGridData = this.state.gridData.map(cell => {\n        if (cell.position === position) {\n          return {\n            position,\n            value\n          };\n        } else {\n          return cell;\n        }\n      });\n      this.setState({\n        gridData: newGridData\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.createGrid();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n      clearGrid: this.createGrid,\n      updateColumns: this.updateColumns,\n      columns: this.state.columns,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Calculator, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      gridData: this.state.gridData,\n      updateCell: this.updateCell,\n      columns: this.state.columns,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }));\n  } // render() {\n  //   return (\n  //     <>\n  //       <Header></Header>\n  //       <MathMaker></MathMaker>\n  //       <Footer></Footer>\n  //     </>\n  //   );\n  // }\n\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bshaley/Development/Projects/Math-Maker/mathmakerfrontend/src/App.js"],"names":["React","Component","Grid","Calculator","Header","Footer","App","state","gridData","columns","rows","createGrid","newCol","oldCol","row","i","col","x","y","Math","floor","position","value","setState","updateColumns","event","parseInt","target","updategrid","colm","newGridData","updateCell","map","cell","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './stylesheets/App.scss';\nimport Grid from './components/Grid'\nimport Calculator from './components/Calculator';\nimport Header from './components/Header'\nimport Footer from './components/Footer'\n\nclass App extends Component {\n  \n  state = {\n    gridData: [],\n    columns: 20,\n    rows: 20\n  }\n\n  componentDidMount() {\n    this.createGrid()\n  }\n\n  createGrid = () => {\n    const newCol = this.state.columns\n    const oldCol = newCol - 1\n    const row = this.state.rows\n    const gridData = []\n    for(let i=0;i<(col*row);i++) {\n      const x = i % col\n      const y = Math.floor(i / col)\n      const position = `${x},${y}`\n      gridData[i] = {position, value:''}\n    }\n    this.setState({gridData})\n  }\n  \n  updateColumns = (event) => {\n    this.setState({columns: parseInt(event.target.value)})\n    this.updategrid(event.target.value)\n  }\n  \n  updategrid = (colm) => {\n    // const oldGridData = this.state.gridData\n    const col = colm\n    const row = this.state.rows\n    const newGridData = []\n    for(let i=0;i<(col*row);i++) {\n      const x = i % col\n      const y = Math.floor(i / col)\n      const position = `${x},${y}`\n\n      \n\n      newGridData[i] = {position, value:''}\n\n    }\n    this.setState({gridData: newGridData})\n  }\n\n\n  updateCell = (position, value) => {\n    const newGridData = this.state.gridData.map(cell => {\n      if(cell.position === position) {\n        return {position, value}\n      } else {\n        return cell\n      }\n    })\n    this.setState({gridData: newGridData})\n  }\n\n  render() {\n    return (\n      <>\n        <Header clearGrid={this.createGrid} updateColumns={this.updateColumns} columns={this.state.columns} ></Header>\n        <main>\n          <Calculator ></Calculator>\n          <Grid gridData={this.state.gridData} updateCell={this.updateCell} columns={this.state.columns} ></Grid>\n        </main>\n        <Footer></Footer>\n      </>\n    ) \n  }\n\n\n  // render() {\n  //   return (\n  //     <>\n  //       <Header></Header>\n  //       <MathMaker></MathMaker>\n  //       <Footer></Footer>\n  //     </>\n\n  //   );\n  // }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}