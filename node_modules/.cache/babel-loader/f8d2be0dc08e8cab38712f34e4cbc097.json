{"ast":null,"code":"var _jsxFileName = \"/Users/bshaley/Development/Projects/Math-Maker/mathmakerfrontend/src/components/MathMaker.js\";\nimport React, { Component } from 'react';\nimport Grid from './Grid';\nimport Calculator from './Calculator';\nexport default class MathMaker extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      gridData: []\n    };\n\n    this.createGrid = () => {\n      const gridData = [];\n\n      for (let i = 0; i < 600; i++) {\n        const x = i % 30;\n        const y = Math.floor(i / 30);\n        const position = `${x},${y}`;\n        gridData[i] = {\n          position,\n          value: ''\n        };\n      }\n\n      this.setState({\n        gridData\n      });\n    };\n\n    this.updateCell = (position, value) => {\n      console.log(this.state.gridData);\n      const newGridData = this.state.gridData.map(cell => {\n        if (cell.position === position) {\n          return {\n            position,\n            value\n          };\n        } else {\n          return cell;\n        }\n      });\n      this.setState({\n        gridData: newGridData\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.createGrid();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Calculator, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      gridData: this.state.gridData,\n      updateCell: this.updateCell,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/bshaley/Development/Projects/Math-Maker/mathmakerfrontend/src/components/MathMaker.js"],"names":["React","Component","Grid","Calculator","MathMaker","state","gridData","createGrid","i","x","y","Math","floor","position","value","setState","updateCell","console","log","newGridData","map","cell","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAEA,eAAe,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAE7CI,KAF6C,GAErC;AACJC,MAAAA,QAAQ,EAAE;AADN,KAFqC;;AAAA,SAM7CC,UAN6C,GAMhC,MAAM;AACf,YAAMD,QAAQ,GAAG,EAAjB;;AACA,WAAI,IAAIE,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAC,GAAd,EAAkBA,CAAC,EAAnB,EAAuB;AACnB,cAAMC,CAAC,GAAGD,CAAC,GAAG,EAAd;AACA,cAAME,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWJ,CAAC,GAAG,EAAf,CAAV;AACA,cAAMK,QAAQ,GAAI,GAAEJ,CAAE,IAAGC,CAAE,EAA3B;AACAJ,QAAAA,QAAQ,CAACE,CAAD,CAAR,GAAc;AAACK,UAAAA,QAAD;AAAWC,UAAAA,KAAK,EAAC;AAAjB,SAAd;AACH;;AACD,WAAKC,QAAL,CAAc;AAACT,QAAAA;AAAD,OAAd;AACH,KAf4C;;AAAA,SAqB7CU,UArB6C,GAqBhC,CAACH,QAAD,EAAWC,KAAX,KAAqB;AAC9BG,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKb,KAAL,CAAWC,QAAvB;AACA,YAAMa,WAAW,GAAG,KAAKd,KAAL,CAAWC,QAAX,CAAoBc,GAApB,CAAwBC,IAAI,IAAI;AAChD,YAAGA,IAAI,CAACR,QAAL,KAAkBA,QAArB,EAA+B;AAC3B,iBAAO;AAACA,YAAAA,QAAD;AAAWC,YAAAA;AAAX,WAAP;AACH,SAFD,MAEO;AACH,iBAAOO,IAAP;AACH;AACJ,OANmB,CAApB;AAQA,WAAKN,QAAL,CAAc;AAACT,QAAAA,QAAQ,EAAEa;AAAX,OAAd;AACH,KAhC4C;AAAA;;AAiB7CG,EAAAA,iBAAiB,GAAG;AACjB,SAAKf,UAAL;AACF;;AAeDgB,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAGI,oBAAC,IAAD;AAAM,MAAA,QAAQ,EAAE,KAAKlB,KAAL,CAAWC,QAA3B;AAAqC,MAAA,UAAU,EAAE,KAAKU,UAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,CADJ;AAOH;;AA1C4C","sourcesContent":["import React,{ Component } from 'react'\nimport Grid from './Grid'\nimport Calculator from './Calculator';\n\nexport default class MathMaker extends Component {\n\n    state = {\n        gridData: []\n    }\n\n    createGrid = () => {\n        const gridData = []\n        for(let i=0;i<600;i++) {\n            const x = i % 30\n            const y = Math.floor(i / 30)\n            const position = `${x},${y}`\n            gridData[i] = {position, value:''}\n        }\n        this.setState({gridData})\n    }\n\n    componentDidMount() {\n       this.createGrid()\n    }\n\n    updateCell = (position, value) => {\n        console.log(this.state.gridData)\n        const newGridData = this.state.gridData.map(cell => {\n            if(cell.position === position) {\n                return {position, value}\n            } else {\n                return cell\n            }\n        })\n\n        this.setState({gridData: newGridData})\n    }\n\n    render() {\n        return (\n            <main>\n                <Calculator ></Calculator>\n                {/* <input type=\"range\" min=\"10\" max=\"50\" class=\"slider\"></input> */}\n                <Grid gridData={this.state.gridData} updateCell={this.updateCell}></Grid>\n            </main>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}