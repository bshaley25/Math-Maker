{"ast":null,"code":"var _jsxFileName = \"/Users/bshaley/Development/Projects/Math-Maker/mathmakerfrontend/src/App.js\";\nimport React, { Component } from 'react';\nimport './stylesheets/App.scss';\nimport Grid from './components/Grid';\nimport Calculator from './components/Calculator';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      gridData: {},\n      columns: 20,\n      rows: 20\n    };\n\n    this.createGrid = () => {\n      const col = this.state.columns;\n      const row = this.state.rows;\n      const gridData = {};\n\n      for (let i = 0; i < col * row; i++) {\n        const x = i % col;\n        const y = Math.floor(i / col);\n        const position = `${x},${y}`; // gridData[i] = {position, value:''}\n\n        gridData[position] = '';\n      }\n\n      this.setState({\n        gridData\n      });\n    };\n\n    this.updategrid = colm => {\n      const oldGridData = this.state.gridData;\n      const col = colm;\n      const row = this.state.rows;\n      const newGridData = [];\n\n      for (let i = 0; i < col * row; i++) {\n        const x = i % col;\n        const y = Math.floor(i / col);\n        const position = `${x},${y}`;\n\n        try {\n          if (oldGridData[i].position) {}\n        } catch (error) {\n          console.log('butts');\n        } //  else {\n        //   console.log(\"DNE\")\n        // }\n\n\n        newGridData[i] = {\n          position,\n          value: ''\n        };\n      }\n\n      this.setState({\n        gridData: newGridData\n      });\n    };\n\n    this.updateColumns = event => {\n      this.setState({\n        columns: parseInt(event.target.value)\n      });\n      this.updategrid(event.target.value);\n    };\n\n    this.updateCell = (position, value) => {\n      const newGridData = this.state.gridData.map(cell => {\n        if (cell.position === position) {\n          return {\n            position,\n            value\n          };\n        } else {\n          return cell;\n        }\n      });\n      this.setState({\n        gridData: newGridData\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.createGrid();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n      clearGrid: this.createGrid,\n      updateColumns: this.updateColumns,\n      columns: this.state.columns,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"main\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Calculator, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      gridData: this.state.gridData,\n      updateCell: this.updateCell,\n      columns: this.state.columns,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }));\n  } // render() {\n  //   return (\n  //     <>\n  //       <Header></Header>\n  //       <MathMaker></MathMaker>\n  //       <Footer></Footer>\n  //     </>\n  //   );\n  // }\n\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bshaley/Development/Projects/Math-Maker/mathmakerfrontend/src/App.js"],"names":["React","Component","Grid","Calculator","Header","Footer","App","state","gridData","columns","rows","createGrid","col","row","i","x","y","Math","floor","position","setState","updategrid","colm","oldGridData","newGridData","error","console","log","value","updateColumns","event","parseInt","target","updateCell","map","cell","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './stylesheets/App.scss';\nimport Grid from './components/Grid'\nimport Calculator from './components/Calculator';\nimport Header from './components/Header'\nimport Footer from './components/Footer'\n\n\nclass App extends Component {\n  \n  state = {\n    gridData: {},\n    columns: 20,\n    rows: 20\n  }\n\n  createGrid = () => {\n    const col = this.state.columns\n    const row = this.state.rows\n    const gridData = {}\n    for(let i=0;i<(col*row);i++) {\n      const x = i % col\n      const y = Math.floor(i / col)\n      const position = `${x},${y}`\n      // gridData[i] = {position, value:''}\n      gridData[position] = ''\n    }\n    this.setState({gridData})\n  }\n\n  updategrid = (colm) => {\n    const oldGridData = this.state.gridData\n    const col = colm\n    const row = this.state.rows\n    const newGridData = []\n    for(let i=0;i<(col*row);i++) {\n      const x = i % col\n      const y = Math.floor(i / col)\n      const position = `${x},${y}`\n\n      try {\n        if(oldGridData[i].position){\n          \n        }\n      } catch (error) {\n        console.log('butts')\n      }\n      //  else {\n      //   console.log(\"DNE\")\n      // }\n      newGridData[i] = {position, value:''}\n    }\n    this.setState({gridData: newGridData})\n  }\n\n  componentDidMount() {\n    this.createGrid()\n  }\n\n  updateColumns = (event) => {\n    this.setState({columns: parseInt(event.target.value)})\n    this.updategrid(event.target.value)\n  }\n\n  updateCell = (position, value) => {\n    const newGridData = this.state.gridData.map(cell => {\n      if(cell.position === position) {\n        return {position, value}\n      } else {\n        return cell\n      }\n    })\n    this.setState({gridData: newGridData})\n  }\n\n  render() {\n    return (\n      <>\n        <Header clearGrid={this.createGrid} updateColumns={this.updateColumns} columns={this.state.columns} ></Header>\n        <main>\n          <Calculator ></Calculator>\n          <Grid gridData={this.state.gridData} updateCell={this.updateCell} columns={this.state.columns} ></Grid>\n        </main>\n        <Footer></Footer>\n      </>\n    ) \n  }\n\n\n  // render() {\n  //   return (\n  //     <>\n  //       <Header></Header>\n  //       <MathMaker></MathMaker>\n  //       <Footer></Footer>\n  //     </>\n\n  //   );\n  // }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}