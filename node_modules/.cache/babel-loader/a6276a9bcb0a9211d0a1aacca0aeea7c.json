{"ast":null,"code":"var _jsxFileName = \"/Users/bshaley/Development/Projects/Math-Maker/mathmakerfrontend/src/App.js\";\nimport React, { Component } from 'react';\nimport './stylesheets/App.scss';\nimport Main from './components/Main';\nimport PictureModal from './components/Modal';\nimport Login from './components/Login';\nimport DashBoard from './components/DashBoard';\nimport UserTools from './components/UserTools';\nimport { storage } from './Firebase/index';\nimport html2canvas from 'html2canvas';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      page: 'main',\n      hasToken: null,\n      user: null,\n      gridID: null,\n      gridData: [],\n      savedGrids: [],\n      columns: 15,\n      rows: 15,\n      url: null,\n      size: 2\n    };\n\n    this.createGrid = () => {\n      const col = this.state.columns;\n      const row = this.state.rows;\n      const gridData = [];\n\n      for (let i = 0; i < col * row; i++) {\n        const x = i % col;\n        const y = Math.floor(i / col);\n        const position = `${x},${y}`;\n        gridData[i] = {\n          position,\n          value: ''\n        };\n      }\n\n      this.setState({\n        gridData\n      });\n    };\n\n    this.plusOneColumn = () => {\n      const oldColCount = this.state.columns;\n      const newColCount = oldColCount + 1;\n      this.updategridColumns(newColCount, oldColCount);\n      this.setState({\n        columns: newColCount\n      });\n    };\n\n    this.minusOneColumn = () => {\n      const oldColCount = this.state.columns;\n      const newColCount = oldColCount - 1;\n      this.updategridColumns(newColCount, oldColCount);\n      this.setState({\n        columns: newColCount\n      });\n    };\n\n    this.updategridColumns = (newColCount, oldColCount) => {\n      const oldGridData = this.state.gridData;\n      const row = this.state.rows;\n      const newGridData = [];\n\n      if (newColCount - oldColCount > 0) {\n        // COLUMNS ARE GETTING BIGGER\n        let counter = 0;\n\n        for (let i = 0; i < oldColCount * row; i++) {\n          if ((i + 1) % oldColCount === 0) {\n            const newPosition = `${newColCount - 1},${counter}`;\n            newGridData.push(oldGridData[i]);\n            newGridData.push({\n              position: newPosition,\n              value: ''\n            });\n            counter++;\n          } else {\n            newGridData.push(oldGridData[i]);\n          }\n        }\n      } else if (newColCount - oldColCount < 0) {\n        // COLUMNS ARE GETTING SMALLER\n        for (let i = 0; i < oldColCount * row; i++) {\n          if ((i + 1) % oldColCount === 0) {// console.log()\n          } else {\n            newGridData.push(oldGridData[i]);\n          }\n        }\n      }\n\n      this.setState({\n        gridData: newGridData\n      });\n    };\n\n    this.plusOneRow = () => {\n      const oldRowCount = this.state.rows;\n      const newRowCount = oldRowCount + 1;\n      this.updategridRows(newRowCount, oldRowCount);\n      this.setState({\n        rows: newRowCount\n      });\n    };\n\n    this.minusOneRow = () => {\n      const oldRowCount = this.state.rows;\n      const newRowCount = oldRowCount - 1;\n      this.updategridRows(newRowCount, oldRowCount);\n      this.setState({\n        rows: newRowCount\n      });\n    };\n\n    this.updategridRows = (newRowCount, oldRowCount) => {\n      const oldGridData = this.state.gridData;\n      const columns = this.state.columns;\n      let newGridData = [];\n\n      if (newRowCount > oldRowCount) {\n        /// ROWS ARE GETTING BIGGER\n        for (let i = 0; i < newRowCount * columns; i++) {\n          const newPosition = `${i % columns},${newRowCount - 1}`;\n\n          if (oldGridData[i]) {\n            newGridData.push(oldGridData[i]);\n          } else {\n            newGridData.push({\n              position: newPosition,\n              value: ''\n            });\n          }\n        }\n      } else if (newRowCount < oldRowCount) {\n        /// ROWS ARE GETTING SMALLER\n        newGridData = oldGridData.slice(0, -1 * columns);\n      }\n\n      this.setState({\n        gridData: newGridData\n      });\n    };\n\n    this.resizeGrid = event => {\n      this.setState({\n        size: event.target.value\n      });\n    };\n\n    this.updateCell = (position, value) => {\n      const newGridData = this.state.gridData.map(cell => {\n        if (cell.position === position) {\n          return {\n            position,\n            value\n          };\n        } else {\n          return cell;\n        }\n      });\n      this.setState({\n        gridData: newGridData\n      });\n    };\n\n    this.saveAsNewGrid = event => {\n      event.preventDefault(); // console.log(storage.ref().putString())\n      // html2canvas(document.getElementById('grid'))\n      // .then(canvas => {\n      //   console.log( typeof canvas.toDataURL())\n      //   storage.ref.putString(canvas.toDataURL(), 'base64').then(function(snapshot) {\n      //     console.log('Uploaded a base64 string!');\n      //   });\n      // });\n      // const { url } = this.state\n      // const uploadTask = storage.ref('images/')\n\n      fetch('http://localhost:5000/grid', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.token}`\n        },\n        body: JSON.stringify({\n          columns: this.state.columns,\n          rows: this.state.rows,\n          gridData: this.state.gridData\n        })\n      }).then(res => res.json()).then(savedGrids => this.setState({\n        savedGrids\n      }));\n    };\n\n    this.saveGrid = event => {\n      event.preventDefault();\n      fetch('http://localhost:5000/savegrid', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.token}`\n        },\n        body: JSON.stringify({\n          gridData: this.state.gridData\n        })\n      }).then(res => res.json()).then();\n    };\n\n    this.getGrid = event => {\n      event.preventDefault();\n      fetch('http://localhost:5000/grids').then(res => res.json()).then(allData => {\n        const savedGrids = allData.map(grid => {\n          return JSON.parse(grid.data);\n        });\n        this.setState({\n          savedGrids\n        });\n      });\n    };\n\n    this.changePage = page => {\n      this.setState({\n        page: page\n      });\n    };\n\n    this.loginUsername = user => {\n      this.setState({\n        user: user\n      });\n    };\n\n    this.changeToken = () => {\n      this.setState({\n        hasToken: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.createGrid();\n\n    if (localStorage.token) {\n      this.setState({\n        hasToken: true\n      });\n      fetch('http://localhost:5000/grids', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.token}`\n        }\n      }).then(res => res.json()).then(data => {\n        this.setState({\n          user: data.user\n        });\n        this.setState({\n          savedGrids: data.grids\n        });\n      });\n    } else {\n      this.setState({\n        hasToken: false\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }\n    }, \"Welcome \", this.state.user), /*#__PURE__*/React.createElement(\"nav\", {\n      className: \"toolbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }\n    }, this.state.hasToken ? /*#__PURE__*/React.createElement(UserTools, {\n      changePage: this.changePage,\n      saveGrid: this.saveGrid,\n      saveAsNewGrid: this.saveAsNewGrid,\n      page: this.state.page,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 37\n      }\n    }) : null, /*#__PURE__*/React.createElement(PictureModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 13\n      }\n    }), this.state.page === 'login' ? /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.changePage('main'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 45\n      }\n    }, \"Go back to main\") : /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.changePage('login'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 120\n      }\n    }, \"login\"))), this.state.page === 'main' ? /*#__PURE__*/React.createElement(Main, {\n      gridData: this.state.gridData,\n      updateCell: this.updateCell,\n      columns: this.state.columns,\n      rows: this.state.rows,\n      size: this.state.size,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }\n    }) : null, this.state.page === 'login' ? /*#__PURE__*/React.createElement(Login, {\n      changePage: this.changePage,\n      loginUsername: this.loginUsername,\n      changeToken: this.changeToken,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 41\n      }\n    }) : null, this.state.page === 'dashboard' ? /*#__PURE__*/React.createElement(DashBoard, {\n      savedGrids: this.state.savedGrids,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 45\n      }\n    }) : null, /*#__PURE__*/React.createElement(\"footer\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.createGrid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }\n    }, \" Clear \"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 13\n      }\n    }, \"Rows: \", this.state.rows), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.minusOneRow(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 13\n      }\n    }, \"-1\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.plusOneRow(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 13\n      }\n    }, \"+1\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 13\n      }\n    }, \"Columns: \", this.state.columns), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.minusOneColumn(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 13\n      }\n    }, \"-1\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.plusOneColumn(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 13\n      }\n    }, \"+1\")), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 13\n      }\n    }, \"Grid Size\"), /*#__PURE__*/React.createElement(\"input\", {\n      className: \"input\",\n      type: \"range\",\n      min: \"2\",\n      max: \"3\",\n      step: \".1\",\n      onChange: this.resizeGrid,\n      value: this.size,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bshaley/Development/Projects/Math-Maker/mathmakerfrontend/src/App.js"],"names":["React","Component","Main","PictureModal","Login","DashBoard","UserTools","storage","html2canvas","App","state","page","hasToken","user","gridID","gridData","savedGrids","columns","rows","url","size","createGrid","col","row","i","x","y","Math","floor","position","value","setState","plusOneColumn","oldColCount","newColCount","updategridColumns","minusOneColumn","oldGridData","newGridData","counter","newPosition","push","plusOneRow","oldRowCount","newRowCount","updategridRows","minusOneRow","slice","resizeGrid","event","target","updateCell","map","cell","saveAsNewGrid","preventDefault","fetch","method","headers","localStorage","token","body","JSON","stringify","then","res","json","saveGrid","getGrid","allData","grid","parse","data","changePage","loginUsername","changeToken","componentDidMount","grids","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,wBAAP;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,OAAOC,WAAP,MAAwB,aAAxB;;AAEA,MAAMC,GAAN,SAAkBR,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BS,KAF0B,GAElB;AACNC,MAAAA,IAAI,EAAE,MADA;AAENC,MAAAA,QAAQ,EAAE,IAFJ;AAGNC,MAAAA,IAAI,EAAE,IAHA;AAINC,MAAAA,MAAM,EAAE,IAJF;AAKNC,MAAAA,QAAQ,EAAE,EALJ;AAMNC,MAAAA,UAAU,EAAE,EANN;AAONC,MAAAA,OAAO,EAAE,EAPH;AAQNC,MAAAA,IAAI,EAAE,EARA;AASNC,MAAAA,GAAG,EAAE,IATC;AAUNC,MAAAA,IAAI,EAAE;AAVA,KAFkB;;AAAA,SAsC1BC,UAtC0B,GAsCb,MAAM;AACjB,YAAMC,GAAG,GAAG,KAAKZ,KAAL,CAAWO,OAAvB;AACA,YAAMM,GAAG,GAAG,KAAKb,KAAL,CAAWQ,IAAvB;AACA,YAAMH,QAAQ,GAAG,EAAjB;;AACA,WAAI,IAAIS,CAAC,GAAC,CAAV,EAAYA,CAAC,GAAEF,GAAG,GAACC,GAAnB,EAAwBC,CAAC,EAAzB,EAA6B;AAC3B,cAAMC,CAAC,GAAGD,CAAC,GAAGF,GAAd;AACA,cAAMI,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWJ,CAAC,GAAGF,GAAf,CAAV;AACA,cAAMO,QAAQ,GAAI,GAAEJ,CAAE,IAAGC,CAAE,EAA3B;AACAX,QAAAA,QAAQ,CAACS,CAAD,CAAR,GAAc;AAACK,UAAAA,QAAD;AAAWC,UAAAA,KAAK,EAAC;AAAjB,SAAd;AACD;;AACD,WAAKC,QAAL,CAAc;AAAChB,QAAAA;AAAD,OAAd;AACD,KAjDyB;;AAAA,SAmD1BiB,aAnD0B,GAmDV,MAAM;AACpB,YAAMC,WAAW,GAAG,KAAKvB,KAAL,CAAWO,OAA/B;AACA,YAAMiB,WAAW,GAAGD,WAAW,GAAG,CAAlC;AACA,WAAKE,iBAAL,CAAuBD,WAAvB,EAAoCD,WAApC;AACA,WAAKF,QAAL,CAAc;AAACd,QAAAA,OAAO,EAAEiB;AAAV,OAAd;AACD,KAxDyB;;AAAA,SA0D1BE,cA1D0B,GA0DT,MAAM;AACrB,YAAMH,WAAW,GAAG,KAAKvB,KAAL,CAAWO,OAA/B;AACA,YAAMiB,WAAW,GAAGD,WAAW,GAAG,CAAlC;AACA,WAAKE,iBAAL,CAAuBD,WAAvB,EAAoCD,WAApC;AACA,WAAKF,QAAL,CAAc;AAACd,QAAAA,OAAO,EAAEiB;AAAV,OAAd;AACD,KA/DyB;;AAAA,SAiE1BC,iBAjE0B,GAiEN,CAACD,WAAD,EAAcD,WAAd,KAA8B;AAChD,YAAMI,WAAW,GAAG,KAAK3B,KAAL,CAAWK,QAA/B;AACA,YAAMQ,GAAG,GAAG,KAAKb,KAAL,CAAWQ,IAAvB;AACA,YAAMoB,WAAW,GAAG,EAApB;;AAEA,UAAKJ,WAAW,GAAGD,WAAf,GAA8B,CAAlC,EAAsC;AAAQ;AAC5C,YAAIM,OAAO,GAAG,CAAd;;AACA,aAAI,IAAIf,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAES,WAAW,GAACV,GAA5B,EAAkCC,CAAC,EAAnC,EAAuC;AACrC,cAAG,CAACA,CAAC,GAAC,CAAH,IAAQS,WAAR,KAAwB,CAA3B,EAA+B;AAC7B,kBAAMO,WAAW,GAAI,GAAGN,WAAW,GAAC,CAAG,IAAGK,OAAQ,EAAlD;AACAD,YAAAA,WAAW,CAACG,IAAZ,CAAiBJ,WAAW,CAACb,CAAD,CAA5B;AACAc,YAAAA,WAAW,CAACG,IAAZ,CAAiB;AAACZ,cAAAA,QAAQ,EAAEW,WAAX;AAAwBV,cAAAA,KAAK,EAAC;AAA9B,aAAjB;AACAS,YAAAA,OAAO;AACR,WALD,MAKO;AACLD,YAAAA,WAAW,CAACG,IAAZ,CAAiBJ,WAAW,CAACb,CAAD,CAA5B;AACD;AACF;AACF,OAZD,MAYO,IAAKU,WAAW,GAAGD,WAAd,GAA4B,CAAjC,EAAqC;AAAG;AAC7C,aAAI,IAAIT,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAES,WAAW,GAACV,GAA5B,EAAkCC,CAAC,EAAnC,EAAuC;AACrC,cAAG,CAACA,CAAC,GAAC,CAAH,IAAQS,WAAR,KAAwB,CAA3B,EAA+B,CAC7B;AACD,WAFD,MAEO;AACLK,YAAAA,WAAW,CAACG,IAAZ,CAAiBJ,WAAW,CAACb,CAAD,CAA5B;AACD;AACF;AACF;;AACD,WAAKO,QAAL,CAAc;AAAChB,QAAAA,QAAQ,EAAEuB;AAAX,OAAd;AACD,KA5FyB;;AAAA,SA8F1BI,UA9F0B,GA8Fb,MAAM;AACjB,YAAMC,WAAW,GAAG,KAAKjC,KAAL,CAAWQ,IAA/B;AACA,YAAM0B,WAAW,GAAGD,WAAW,GAAG,CAAlC;AACA,WAAKE,cAAL,CAAoBD,WAApB,EAAiCD,WAAjC;AACA,WAAKZ,QAAL,CAAc;AAACb,QAAAA,IAAI,EAAE0B;AAAP,OAAd;AACD,KAnGyB;;AAAA,SAqG1BE,WArG0B,GAqGZ,MAAM;AAClB,YAAMH,WAAW,GAAG,KAAKjC,KAAL,CAAWQ,IAA/B;AACA,YAAM0B,WAAW,GAAGD,WAAW,GAAG,CAAlC;AACA,WAAKE,cAAL,CAAoBD,WAApB,EAAiCD,WAAjC;AACA,WAAKZ,QAAL,CAAc;AAACb,QAAAA,IAAI,EAAE0B;AAAP,OAAd;AACD,KA1GyB;;AAAA,SA4G1BC,cA5G0B,GA4GT,CAACD,WAAD,EAAcD,WAAd,KAA8B;AAC7C,YAAMN,WAAW,GAAG,KAAK3B,KAAL,CAAWK,QAA/B;AACA,YAAME,OAAO,GAAG,KAAKP,KAAL,CAAWO,OAA3B;AACA,UAAIqB,WAAW,GAAG,EAAlB;;AAEA,UAAKM,WAAW,GAAGD,WAAnB,EAAgC;AAAe;AAC7C,aAAI,IAAInB,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAEoB,WAAW,GAAC3B,OAA5B,EAAsCO,CAAC,EAAvC,EAA2C;AACzC,gBAAMgB,WAAW,GAAI,GAAGhB,CAAC,GAAGP,OAAS,IAAK2B,WAAW,GAAG,CAAI,EAA5D;;AACA,cAAIP,WAAW,CAACb,CAAD,CAAf,EAAqB;AACnBc,YAAAA,WAAW,CAACG,IAAZ,CAAiBJ,WAAW,CAACb,CAAD,CAA5B;AACD,WAFD,MAEO;AACLc,YAAAA,WAAW,CAACG,IAAZ,CAAiB;AAACZ,cAAAA,QAAQ,EAAEW,WAAX;AAAwBV,cAAAA,KAAK,EAAE;AAA/B,aAAjB;AACD;AACF;AACF,OATD,MASO,IAAKc,WAAW,GAAGD,WAAnB,EAAiC;AAAO;AAC7CL,QAAAA,WAAW,GAAGD,WAAW,CAACU,KAAZ,CAAmB,CAAnB,EAAwB,CAAC,CAAD,GAAK9B,OAA7B,CAAd;AACD;;AACD,WAAKc,QAAL,CAAc;AAAChB,QAAAA,QAAQ,EAAEuB;AAAX,OAAd;AACD,KA9HyB;;AAAA,SAgI1BU,UAhI0B,GAgIZC,KAAD,IAAW;AACtB,WAAKlB,QAAL,CAAc;AAACX,QAAAA,IAAI,EAAE6B,KAAK,CAACC,MAAN,CAAapB;AAApB,OAAd;AACD,KAlIyB;;AAAA,SAoI1BqB,UApI0B,GAoIb,CAACtB,QAAD,EAAWC,KAAX,KAAqB;AAChC,YAAMQ,WAAW,GAAG,KAAK5B,KAAL,CAAWK,QAAX,CAAoBqC,GAApB,CAAwBC,IAAI,IAAI;AAClD,YAAGA,IAAI,CAACxB,QAAL,KAAkBA,QAArB,EAA+B;AAC7B,iBAAO;AAACA,YAAAA,QAAD;AAAWC,YAAAA;AAAX,WAAP;AACD,SAFD,MAEO;AACL,iBAAOuB,IAAP;AACD;AACF,OANmB,CAApB;AAOA,WAAKtB,QAAL,CAAc;AAAChB,QAAAA,QAAQ,EAAEuB;AAAX,OAAd;AACD,KA7IyB;;AAAA,SA+I1BgB,aA/I0B,GA+ITL,KAAD,IAAW;AAEzBA,MAAAA,KAAK,CAACM,cAAN,GAFyB,CAIzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAAA,KAAK,CAAC,4BAAD,EAA+B;AAClCC,QAAAA,MAAM,EAAE,MAD0B;AAElCC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEP,2BAAkB,UAASC,YAAY,CAACC,KAAM;AAFvC,SAFyB;AAMlCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnB9C,UAAAA,OAAO,EAAE,KAAKP,KAAL,CAAWO,OADD;AAEnBC,UAAAA,IAAI,EAAE,KAAKR,KAAL,CAAWQ,IAFE;AAGnBH,UAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWK;AAHF,SAAf;AAN4B,OAA/B,CAAL,CAYCiD,IAZD,CAYMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAZb,EAaCF,IAbD,CAaMhD,UAAU,IAAI,KAAKe,QAAL,CAAc;AAACf,QAAAA;AAAD,OAAd,CAbpB;AAcD,KA5KyB;;AAAA,SA8K1BmD,QA9K0B,GA8KdlB,KAAD,IAAW;AAEpBA,MAAAA,KAAK,CAACM,cAAN;AAEAC,MAAAA,KAAK,CAAC,gCAAD,EAAmC;AACtCC,QAAAA,MAAM,EAAE,MAD8B;AAEtCC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEP,2BAAkB,UAASC,YAAY,CAACC,KAAM;AAFvC,SAF6B;AAMtCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEhD,UAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWK;AAAvB,SAAf;AANgC,OAAnC,CAAL,CAQCiD,IARD,CAQMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EARb,EASCF,IATD;AAUD,KA5LyB;;AAAA,SA8L1BI,OA9L0B,GA8LhBnB,KAAK,IAAI;AAEjBA,MAAAA,KAAK,CAACM,cAAN;AAEAC,MAAAA,KAAK,CAAC,6BAAD,CAAL,CACCQ,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADb,EAECF,IAFD,CAEMK,OAAO,IAAI;AAEf,cAAMrD,UAAU,GAAGqD,OAAO,CAACjB,GAAR,CAAYkB,IAAI,IAAI;AACrC,iBAAOR,IAAI,CAACS,KAAL,CAAWD,IAAI,CAACE,IAAhB,CAAP;AACD,SAFkB,CAAnB;AAIA,aAAKzC,QAAL,CAAc;AAAEf,UAAAA;AAAF,SAAd;AAED,OAVD;AAWD,KA7MyB;;AAAA,SA+M1ByD,UA/M0B,GA+MZ9D,IAAD,IAAU;AACrB,WAAKoB,QAAL,CAAc;AAACpB,QAAAA,IAAI,EAAEA;AAAP,OAAd;AACD,KAjNyB;;AAAA,SAmN1B+D,aAnN0B,GAmNT7D,IAAD,IAAU;AACxB,WAAKkB,QAAL,CAAc;AAAClB,QAAAA,IAAI,EAAEA;AAAP,OAAd;AACD,KArNyB;;AAAA,SAuN1B8D,WAvN0B,GAuNZ,MAAM;AAClB,WAAK5C,QAAL,CAAc;AAACnB,QAAAA,QAAQ,EAAE;AAAX,OAAd;AACD,KAzNyB;AAAA;;AAe1BgE,EAAAA,iBAAiB,GAAG;AAClB,SAAKvD,UAAL;;AAEA,QAAGsC,YAAY,CAACC,KAAhB,EAAuB;AACrB,WAAK7B,QAAL,CAAc;AAACnB,QAAAA,QAAQ,EAAE;AAAX,OAAd;AAEA4C,MAAAA,KAAK,CAAC,6BAAD,EAAgC;AACnCC,QAAAA,MAAM,EAAE,KAD2B;AAEnCC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEP,2BAAkB,UAASC,YAAY,CAACC,KAAM;AAFvC;AAF0B,OAAhC,CAAL,CAOCI,IAPD,CAOMC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAPb,EAQCF,IARD,CAQMQ,IAAI,IAAI;AACZ,aAAKzC,QAAL,CAAc;AAAClB,UAAAA,IAAI,EAAE2D,IAAI,CAAC3D;AAAZ,SAAd;AACA,aAAKkB,QAAL,CAAc;AAACf,UAAAA,UAAU,EAAEwD,IAAI,CAACK;AAAlB,SAAd;AACD,OAXD;AAYD,KAfD,MAeO;AACL,WAAK9C,QAAL,CAAc;AAACnB,QAAAA,QAAQ,EAAE;AAAX,OAAd;AACD;AACF;;AAuLDkE,EAAAA,MAAM,GAAG;AACP,wBACE,uDACE;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAa,KAAKpE,KAAL,CAAWG,IAAxB,CADF,eAEE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,KAAKH,KAAL,CAAWE,QAAX,gBAAsB,oBAAC,SAAD;AAAW,MAAA,UAAU,EAAE,KAAK6D,UAA5B;AAAwC,MAAA,QAAQ,EAAE,KAAKN,QAAvD;AAAiE,MAAA,aAAa,EAAE,KAAKb,aAArF;AAAoG,MAAA,IAAI,EAAE,KAAK5C,KAAL,CAAWC,IAArH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAtB,GAAsJ,IAD1J,eAEE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGI,KAAKD,KAAL,CAAWC,IAAX,KAAoB,OAApB,gBAA8B;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAK8D,UAAL,CAAgB,MAAhB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA9B,gBAAyG;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKA,UAAL,CAAgB,OAAhB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAH7G,CAFF,CADF,EAUI,KAAK/D,KAAL,CAAWC,IAAX,KAAoB,MAApB,gBACA,oBAAC,IAAD;AACE,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWK,QADvB;AAEE,MAAA,UAAU,EAAE,KAAKoC,UAFnB;AAGE,MAAA,OAAO,EAAE,KAAKzC,KAAL,CAAWO,OAHtB;AAIE,MAAA,IAAI,EAAE,KAAKP,KAAL,CAAWQ,IAJnB;AAKE,MAAA,IAAI,EAAE,KAAKR,KAAL,CAAWU,IALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,GAQE,IAlBN,EAmBI,KAAKV,KAAL,CAAWC,IAAX,KAAoB,OAApB,gBAA8B,oBAAC,KAAD;AAAO,MAAA,UAAU,EAAE,KAAK8D,UAAxB;AAAoC,MAAA,aAAa,EAAE,KAAKC,aAAxD;AAAuE,MAAA,WAAW,EAAE,KAAKC,WAAzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA9B,GAAyI,IAnB7I,EAoBI,KAAKjE,KAAL,CAAWC,IAAX,KAAoB,WAApB,gBAAkC,oBAAC,SAAD;AAAW,MAAA,UAAU,EAAE,KAAKD,KAAL,CAAWM,UAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlC,GAA+F,IApBnG,eAsBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,OAAO,EAAE,KAAKK,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAU,KAAKX,KAAL,CAAWQ,IAArB,CAFF,eAGE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAK4B,WAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKJ,UAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,CAFF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAa,KAAKhC,KAAL,CAAWO,OAAxB,CADF,eAEE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKmB,cAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKJ,aAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,CATF,eAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AAAO,MAAA,SAAS,EAAC,OAAjB;AAAyB,MAAA,IAAI,EAAC,OAA9B;AAAsC,MAAA,GAAG,EAAC,GAA1C;AAA8C,MAAA,GAAG,EAAC,GAAlD;AAAsD,MAAA,IAAI,EAAC,IAA3D;AAAgE,MAAA,QAAQ,EAAE,KAAKgB,UAA/E;AAA2F,MAAA,KAAK,EAAE,KAAK5B,IAAvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAfF,CAtBF,CADF;AA8CD;;AA1QyB;;AA6Q5B,eAAeX,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './stylesheets/App.scss';\nimport Main from './components/Main'\nimport PictureModal from './components/Modal'\nimport Login from './components/Login'\nimport DashBoard from './components/DashBoard';\nimport UserTools from './components/UserTools'\nimport { storage } from './Firebase/index'\nimport html2canvas from 'html2canvas'\n\nclass App extends Component {\n  \n  state = {\n    page: 'main',\n    hasToken: null,\n    user: null,\n    gridID: null,\n    gridData: [],\n    savedGrids: [],\n    columns: 15,\n    rows: 15,\n    url: null,\n    size: 2,\n  }\n\n  componentDidMount() {\n    this.createGrid()\n\n    if(localStorage.token) {\n      this.setState({hasToken: true})\n\n      fetch('http://localhost:5000/grids', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.token}`\n        }\n      })\n      .then(res => res.json())\n      .then(data => {\n        this.setState({user: data.user})\n        this.setState({savedGrids: data.grids})\n      })\n    } else {\n      this.setState({hasToken: false})\n    }\n  }\n\n  createGrid = () => {\n    const col = this.state.columns\n    const row = this.state.rows\n    const gridData = []\n    for(let i=0;i<(col*row);i++) {\n      const x = i % col\n      const y = Math.floor(i / col)\n      const position = `${x},${y}`\n      gridData[i] = {position, value:''}\n    }\n    this.setState({gridData})\n  }\n\n  plusOneColumn = () => {\n    const oldColCount = this.state.columns\n    const newColCount = oldColCount + 1\n    this.updategridColumns(newColCount, oldColCount)\n    this.setState({columns: newColCount})\n  }\n\n  minusOneColumn = () => {\n    const oldColCount = this.state.columns\n    const newColCount = oldColCount - 1\n    this.updategridColumns(newColCount, oldColCount)\n    this.setState({columns: newColCount})\n  }\n  \n  updategridColumns = (newColCount, oldColCount) => {\n    const oldGridData = this.state.gridData\n    const row = this.state.rows\n    const newGridData = [] \n\n    if( (newColCount - oldColCount) > 0 ) {       // COLUMNS ARE GETTING BIGGER\n      let counter = 0\n      for(let i=0; i<(oldColCount*row); i++) {\n        if((i+1) % oldColCount === 0 ) {\n          const newPosition = `${(newColCount-1)},${counter}`\n          newGridData.push(oldGridData[i])\n          newGridData.push({position: newPosition, value:''})\n          counter++\n        } else {\n          newGridData.push(oldGridData[i])\n        }\n      }\n    } else if ( newColCount - oldColCount < 0 ) {  // COLUMNS ARE GETTING SMALLER\n      for(let i=0; i<(oldColCount*row); i++) {\n        if((i+1) % oldColCount === 0 ) {\n          // console.log()\n        } else {\n          newGridData.push(oldGridData[i])\n        }\n      }\n    }\n    this.setState({gridData: newGridData})\n  }\n\n  plusOneRow = () => {\n    const oldRowCount = this.state.rows\n    const newRowCount = oldRowCount + 1\n    this.updategridRows(newRowCount, oldRowCount)\n    this.setState({rows: newRowCount})\n  }\n\n  minusOneRow = () => {\n    const oldRowCount = this.state.rows\n    const newRowCount = oldRowCount - 1\n    this.updategridRows(newRowCount, oldRowCount)\n    this.setState({rows: newRowCount})\n  }\n  \n  updategridRows = (newRowCount, oldRowCount) => { \n    const oldGridData = this.state.gridData\n    const columns = this.state.columns\n    let newGridData = [] \n\n    if ( newRowCount > oldRowCount) {              /// ROWS ARE GETTING BIGGER\n      for(let i=0; i<(newRowCount*columns); i++) {\n        const newPosition = `${(i % columns)},${ (newRowCount - 1) }`\n        if( oldGridData[i] ) {\n          newGridData.push(oldGridData[i])\n        } else {\n          newGridData.push({position: newPosition, value: ''})\n        }\n      }\n    } else if ( newRowCount < oldRowCount ) {      /// ROWS ARE GETTING SMALLER\n      newGridData = oldGridData.slice( 0 , (-1 * columns) );\n    }\n    this.setState({gridData: newGridData})\n  }\n\n  resizeGrid = (event) => {\n    this.setState({size: event.target.value})\n  }\n\n  updateCell = (position, value) => {\n    const newGridData = this.state.gridData.map(cell => {\n      if(cell.position === position) {\n        return {position, value}\n      } else {\n        return cell\n      }\n    })\n    this.setState({gridData: newGridData})\n  }\n\n  saveAsNewGrid = (event) => {\n\n    event.preventDefault()\n\n    // console.log(storage.ref().putString())\n    // html2canvas(document.getElementById('grid'))\n    // .then(canvas => {\n    //   console.log( typeof canvas.toDataURL())\n    //   storage.ref.putString(canvas.toDataURL(), 'base64').then(function(snapshot) {\n    //     console.log('Uploaded a base64 string!');\n    //   });\n    // });\n    // const { url } = this.state\n    // const uploadTask = storage.ref('images/')\n\n    fetch('http://localhost:5000/grid', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.token}`\n      },\n      body: JSON.stringify({ \n        columns: this.state.columns,\n        rows: this.state.rows,\n        gridData: this.state.gridData\n      }),\n    })\n    .then(res => res.json())\n    .then(savedGrids => this.setState({savedGrids}))\n  }\n\n  saveGrid = (event) => {\n\n    event.preventDefault()\n\n    fetch('http://localhost:5000/savegrid', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.token}`\n      },\n      body: JSON.stringify({ gridData: this.state.gridData }),\n    })\n    .then(res => res.json())\n    .then()\n  }\n\n  getGrid = event => {\n\n    event.preventDefault()\n\n    fetch('http://localhost:5000/grids')\n    .then(res => res.json())\n    .then(allData => {\n\n      const savedGrids = allData.map(grid => {\n        return JSON.parse(grid.data)\n      })\n\n      this.setState({ savedGrids })\n\n    })\n  }\n\n  changePage = (page) => {\n    this.setState({page: page})\n  }\n\n  loginUsername = (user) => {\n    this.setState({user: user})\n  }\n\n  changeToken = () => {\n    this.setState({hasToken: true})\n  }\n\n  render() {\n    return (\n      <>\n        <header className='header'>\n          <h1>Welcome {this.state.user}</h1>\n          <nav className='toolbar'>\n            { this.state.hasToken ? <UserTools changePage={this.changePage} saveGrid={this.saveGrid} saveAsNewGrid={this.saveAsNewGrid} page={this.state.page} /> : null}\n            <PictureModal/>\n            { this.state.page === 'login' ? <button onClick={() => this.changePage('main')}>Go back to main</button> : <button onClick={() => this.changePage('login')}>login</button>  }\n          </nav>\n        </header>\n\n        { this.state.page === 'main' ? \n          <Main\n            gridData={this.state.gridData} \n            updateCell={this.updateCell} \n            columns={this.state.columns} \n            rows={this.state.rows} \n            size={this.state.size}\n          /> \n          : null}\n        { this.state.page === 'login' ? <Login changePage={this.changePage} loginUsername={this.loginUsername} changeToken={this.changeToken} /> : null }\n        { this.state.page === 'dashboard' ? <DashBoard savedGrids={this.state.savedGrids}></DashBoard> : null}\n\n        <footer>\n          <button onClick={this.createGrid}> Clear </button>\n          <div>\n            {/* <input className='input' type=\"number\" min=\"10\" max=\"40\" onChange={this.updateRows} value={this.state.rows}/> */}\n            <p>Rows: {this.state.rows}</p>\n            <button onClick={() => this.minusOneRow()}>-1</button>   \n            <button onClick={() => this.plusOneRow()}>+1</button>   \n          </div>\n\n          <div>\n            <p>Columns: {this.state.columns}</p>\n            <button onClick={() => this.minusOneColumn()}>-1</button>   \n            <button onClick={() => this.plusOneColumn()}>+1</button>        \n          </div>\n\n          <div>\n            <p>Grid Size</p>\n            <input className='input' type=\"range\" min=\"2\" max=\"3\" step='.1' onChange={this.resizeGrid} value={this.size}></input>\n          </div>\n        </footer>\n\n      </>\n    ) \n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}